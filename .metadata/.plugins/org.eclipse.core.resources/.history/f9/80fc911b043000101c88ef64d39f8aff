/*
 * jump_to_app.c
 *
 *  Created on: May 13, 2025
 *      Author: RyanDank
 */


#include "jump_to_app.h"

#define TRIGGER_ADDR     ((uint8_t *)0x08007FFD)
#define BOOTMODE_ADDR    ((uint8_t *)0x08007FFE)

#define APP1_ADDR        0x08008000
#define APP2_ADDR        0x08040000

#define SECTOR_1_BASE    0x08004000
#define SECTOR_1_NUMBER  1

static void jump_to_application(uint32_t app_address);

void check_and_jump_boot_mode(void) {
    // Kiểm tra trigger
    if (*TRIGGER_ADDR != 0xAA)
        return;

    uint8_t bootmode = *BOOTMODE_ADDR;

    // Mở khóa flash
    if ((FLASH->CR & FLASH_CR_LOCK) != 0) {
        FLASH->KEYR = 0x45670123;
        FLASH->KEYR = 0xCDEF89AB;
    }

    // Đợi flash không busy
    while (FLASH->SR & FLASH_SR_BSY);

    // Xóa sector 1
    FLASH->CR &= ~FLASH_CR_SNB;
    FLASH->CR |= FLASH_CR_SER | (SECTOR_1_NUMBER << FLASH_CR_SNB_Pos);
    FLASH->CR |= FLASH_CR_STRT;

    // Đợi xóa xong
    while (FLASH->SR & FLASH_SR_BSY);

//    // Kiểm tra lỗi
//	if (FLASH->SR & (FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR)) {
//		FLASH->CR &= ~FLASH_CR_SER;
//		FLASH->CR |= FLASH_CR_LOCK;
//		return;
//	}

    // Tắt SER
    FLASH->CR &= ~FLASH_CR_SER;

    // Ghi lại giá trị bootmode vào địa chỉ
    FLASH->CR |= FLASH_CR_PG;

    // Ghi từng nửa word (16-bit)
    *(volatile uint8_t *)BOOTMODE_ADDR = bootmode;

    // Đợi ghi xong
    while (FLASH->SR & FLASH_SR_BSY);

//    // Kiểm tra lỗi
//	if (FLASH->SR & (FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR)) {
//		FLASH->CR &= ~FLASH_CR_SER;
//		FLASH->CR |= FLASH_CR_LOCK;
//		return;
//	}

    // Tắt ghi
    FLASH->CR &= ~FLASH_CR_PG;

    // Khóa lại Flash
    FLASH->CR |= FLASH_CR_LOCK;

	#define USER_VECT_TAB_ADDRESS
    // Xử lý nhảy ứng dụng
    if (bootmode == 0x01) {
		#define VECT_TAB_BASE_ADDRESS 0x8008000
		#define VECT_TAB_OFFSET 0x8000U
//        SCB->VTOR = APP1_ADDR;
        jump_to_application(APP1_ADDR);
    } else if (bootmode == 0x02) {
		#define VECT_TAB_BASE_ADDRESS 0x8040000
		#define VECT_TAB_OFFSET 0x40000U
//        SCB->VTOR = APP2_ADDR;
        jump_to_application(APP2_ADDR);
    }
}

static void jump_to_application(uint32_t app_address) {

    uint32_t jump_addr = *(__IO uint32_t *)(app_address + 4);
    void (*app_reset_handler)(void) = (void *)jump_addr;
    __set_MSP(*(__IO uint32_t *)app_address);

    app_reset_handler();
}
