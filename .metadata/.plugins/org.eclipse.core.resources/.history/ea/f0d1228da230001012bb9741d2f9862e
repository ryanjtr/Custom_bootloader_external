#ifndef UART_COMMAND_H_
#define UART_COMMAND_H_

#include "main.h"
#include "uart_log.h"

#define D_UART   &huart2 //debug
#define C_UART   &huart6 //command
#define BL_RX_LEN  512

// Bootloader commands
#define BL_START_UPDATE 0x56
#define BL_MEM_WRITE  0x57

/* ACK and NACK bytes */
#define BL_ACK   0XA5
#define BL_NACK  0X7F

/* CRC */
#define VERIFY_CRC_FAIL    1
#define VERIFY_CRC_SUCCESS 0

/* SECTOR */
#define VALID_SECTOR   1
#define INVALID_SECTOR 0

#define BANK_APP 2
#define NUM_OF_BANK_APP 4
#define BANK_BACKUP 6
#define NUM_OF_BANK_BACKUP 2

#define START_APP_ADDRESS    0x08008000
#define START_BACKUP_ADDRESS 0x08040000
#define CURRENT_ADDR_STORAGE 0x08007FF0
#define STATUS_APP			 0x08007FFE
extern uint8_t bl_rx_buffer[BL_RX_LEN];
extern CRC_HandleTypeDef hcrc; // Thêm khai báo hcrc

void bootloader_uart_read_data(void);
void bootloader_jump_to_user_app(uint8_t bank);
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer);
void bootloader_send_ack(uint8_t follow_len);
void bootloader_send_nack(void);
uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host);
void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len);
void bootloader_handle_start_update(uint8_t *pBuffer);
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len);
uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector);
#endif /* UART_COMMAND_H_ */
