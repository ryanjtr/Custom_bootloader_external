
custom_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039bc  080039bc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000005c  08003a20  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08003a20  00005484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e5a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002051  00000000  00000000  0000eee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00010f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069b  00000000  00000000  00011808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001652e  00000000  00000000  00011ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be12  00000000  00000000  000283d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086993  00000000  00000000  000341e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bab76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  000babbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bd2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003918 	.word	0x08003918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003918 	.word	0x08003918

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <check_and_jump_boot_mode>:
#define SECTOR_1_BASE    0x08004000
#define SECTOR_1_NUMBER  1

static void jump_to_application(uint32_t app_address);

void check_and_jump_boot_mode(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
    // Kiểm tra trigger
    if (*TRIGGER_ADDR != 0xAA)
 80005c2:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <check_and_jump_boot_mode+0xdc>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2baa      	cmp	r3, #170	@ 0xaa
 80005c8:	d162      	bne.n	8000690 <check_and_jump_boot_mode+0xd4>
        return;

    uint8_t bootmode = *BOOTMODE_ADDR;
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <check_and_jump_boot_mode+0xe0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]

    // Mở khóa flash
    if ((FLASH->CR & FLASH_CR_LOCK) != 0) {
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da05      	bge.n	80005e4 <check_and_jump_boot_mode+0x28>
        FLASH->KEYR = 0x45670123;
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005da:	4a32      	ldr	r2, [pc, #200]	@ (80006a4 <check_and_jump_boot_mode+0xe8>)
 80005dc:	605a      	str	r2, [r3, #4]
        FLASH->KEYR = 0xCDEF89AB;
 80005de:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005e0:	4a31      	ldr	r2, [pc, #196]	@ (80006a8 <check_and_jump_boot_mode+0xec>)
 80005e2:	605a      	str	r2, [r3, #4]
    }

    // Đợi flash không busy
    while (FLASH->SR & FLASH_SR_BSY);
 80005e4:	bf00      	nop
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f9      	bne.n	80005e6 <check_and_jump_boot_mode+0x2a>

    // Xóa sector 1
    FLASH->CR &= ~FLASH_CR_SNB;
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 80005f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80005fc:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | (SECTOR_1_NUMBER << FLASH_CR_SNB_Pos);
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000604:	f043 030a 	orr.w	r3, r3, #10
 8000608:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000614:	6113      	str	r3, [r2, #16]

    // Đợi xóa xong
    while (FLASH->SR & FLASH_SR_BSY);
 8000616:	bf00      	nop
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f9      	bne.n	8000618 <check_and_jump_boot_mode+0x5c>
//		FLASH->CR |= FLASH_CR_LOCK;
//		return;
//	}

    // Tắt SER
    FLASH->CR &= ~FLASH_CR_SER;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	4a1d      	ldr	r2, [pc, #116]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 800062a:	f023 0302 	bic.w	r3, r3, #2
 800062e:	6113      	str	r3, [r2, #16]

    // Ghi lại giá trị bootmode vào địa chỉ
    FLASH->CR |= FLASH_CR_PG;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	4a1a      	ldr	r2, [pc, #104]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6113      	str	r3, [r2, #16]

    // Ghi từng nửa word (16-bit)
    *(volatile uint8_t *)BOOTMODE_ADDR = bootmode;
 800063c:	4a17      	ldr	r2, [pc, #92]	@ (800069c <check_and_jump_boot_mode+0xe0>)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	7013      	strb	r3, [r2, #0]

    // Đợi ghi xong
    while (FLASH->SR & FLASH_SR_BSY);
 8000642:	bf00      	nop
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f9      	bne.n	8000644 <check_and_jump_boot_mode+0x88>
//		FLASH->CR |= FLASH_CR_LOCK;
//		return;
//	}

    // Tắt ghi
    FLASH->CR &= ~FLASH_CR_PG;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	6113      	str	r3, [r2, #16]

    // Khóa lại Flash
    FLASH->CR |= FLASH_CR_LOCK;
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <check_and_jump_boot_mode+0xe4>)
 8000662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000666:	6113      	str	r3, [r2, #16]

    // Xử lý nhảy ứng dụng
    if (bootmode == 0x01) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d106      	bne.n	800067c <check_and_jump_boot_mode+0xc0>
        SCB->VTOR = APP1_ADDR;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <check_and_jump_boot_mode+0xf0>)
 8000670:	4a0f      	ldr	r2, [pc, #60]	@ (80006b0 <check_and_jump_boot_mode+0xf4>)
 8000672:	609a      	str	r2, [r3, #8]
        jump_to_application(APP1_ADDR);
 8000674:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <check_and_jump_boot_mode+0xf4>)
 8000676:	f000 f81f 	bl	80006b8 <jump_to_application>
 800067a:	e00a      	b.n	8000692 <check_and_jump_boot_mode+0xd6>
    } else if (bootmode == 0x02) {
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d107      	bne.n	8000692 <check_and_jump_boot_mode+0xd6>
        SCB->VTOR = APP2_ADDR;
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <check_and_jump_boot_mode+0xf0>)
 8000684:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <check_and_jump_boot_mode+0xf8>)
 8000686:	609a      	str	r2, [r3, #8]
        jump_to_application(APP2_ADDR);
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <check_and_jump_boot_mode+0xf8>)
 800068a:	f000 f815 	bl	80006b8 <jump_to_application>
 800068e:	e000      	b.n	8000692 <check_and_jump_boot_mode+0xd6>
        return;
 8000690:	bf00      	nop
    }
}
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08007ffd 	.word	0x08007ffd
 800069c:	08007ffe 	.word	0x08007ffe
 80006a0:	40023c00 	.word	0x40023c00
 80006a4:	45670123 	.word	0x45670123
 80006a8:	cdef89ab 	.word	0xcdef89ab
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	08008000 	.word	0x08008000
 80006b4:	08040000 	.word	0x08040000

080006b8 <jump_to_application>:

static void jump_to_application(uint32_t app_address) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

    uint32_t jump_addr = *(__IO uint32_t *)(app_address + 4);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3304      	adds	r3, #4
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	617b      	str	r3, [r7, #20]
    void (*app_reset_handler)(void) = (void *)jump_addr;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
    __set_MSP(*(__IO uint32_t *)app_address);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f383 8808 	msr	MSP, r3
}
 80006d8:	bf00      	nop

    app_reset_handler();
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4798      	blx	r3
}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <__NVIC_SystemReset+0x24>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006fa:	4904      	ldr	r1, [pc, #16]	@ (800070c <__NVIC_SystemReset+0x24>)
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <__NVIC_SystemReset+0x28>)
 80006fe:	4313      	orrs	r3, r2
 8000700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000702:	f3bf 8f4f 	dsb	sy
}
 8000706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <__NVIC_SystemReset+0x20>
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	05fa0004 	.word	0x05fa0004

08000714 <bootloader_uart_read_data>:
//| LENGTH TO FOLLOW | COMMAND CODE | PAYLOAD LENGTH | PAYLOAD       | CRC          |
//|------------------|--------------|----------------|---------------|--------------|
//| 1 byte           | 1 byte       | 1 byte         | X bytes       | 4 bytes      |

void bootloader_uart_read_data(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint8_t rcv_len = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]

    while (1)
    {
        memset(bl_rx_buffer, 0, BL_RX_LEN);
 800071e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000722:	2100      	movs	r1, #0
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <bootloader_uart_read_data+0x54>)
 8000726:	f002 fc79 	bl	800301c <memset>
        HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	490d      	ldr	r1, [pc, #52]	@ (8000768 <bootloader_uart_read_data+0x54>)
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <bootloader_uart_read_data+0x58>)
 8000734:	f002 f88b 	bl	800284e <HAL_UART_Receive>
        rcv_len = bl_rx_buffer[0];
 8000738:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <bootloader_uart_read_data+0x54>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	71fb      	strb	r3, [r7, #7]
        HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	490a      	ldr	r1, [pc, #40]	@ (8000770 <bootloader_uart_read_data+0x5c>)
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <bootloader_uart_read_data+0x58>)
 800074a:	f002 f880 	bl	800284e <HAL_UART_Receive>
        if (bl_rx_buffer[1] == BL_MEM_WRITE)
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <bootloader_uart_read_data+0x54>)
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	2b57      	cmp	r3, #87	@ 0x57
 8000754:	d103      	bne.n	800075e <bootloader_uart_read_data+0x4a>
        {
            bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000756:	4804      	ldr	r0, [pc, #16]	@ (8000768 <bootloader_uart_read_data+0x54>)
 8000758:	f000 f83e 	bl	80007d8 <bootloader_handle_mem_write_cmd>
 800075c:	e7df      	b.n	800071e <bootloader_uart_read_data+0xa>
        }
        else
        {
            printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <bootloader_uart_read_data+0x60>)
 8000760:	f000 f9a4 	bl	8000aac <printmsg>
        memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000764:	e7db      	b.n	800071e <bootloader_uart_read_data+0xa>
 8000766:	bf00      	nop
 8000768:	20000078 	.word	0x20000078
 800076c:	200002cc 	.word	0x200002cc
 8000770:	20000079 	.word	0x20000079
 8000774:	08003930 	.word	0x08003930

08000778 <bootloader_jump_to_user_app>:
        }
    }
}

void bootloader_jump_to_user_app(uint8_t bank_value)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	execute_flash_erase(1,1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f94a 	bl	8000a1e <execute_flash_erase>
    HAL_FLASH_Unlock();
 800078a:	f000 fe8b 	bl	80014a4 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08007FFE, (bank_value == 0x01) ? 0x01 : 0x02);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d104      	bne.n	800079e <bootloader_jump_to_user_app+0x26>
 8000794:	f04f 0201 	mov.w	r2, #1
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e003      	b.n	80007a6 <bootloader_jump_to_user_app+0x2e>
 800079e:	f04f 0202 	mov.w	r2, #2
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	490a      	ldr	r1, [pc, #40]	@ (80007d0 <bootloader_jump_to_user_app+0x58>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fe29 	bl	8001400 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80007ae:	f000 fe9b 	bl	80014e8 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80007b2:	f000 fe77 	bl	80014a4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08007FFD, 0xAA);//trigger to jump to app after reset
 80007b6:	f04f 02aa 	mov.w	r2, #170	@ 0xaa
 80007ba:	f04f 0300 	mov.w	r3, #0
 80007be:	4905      	ldr	r1, [pc, #20]	@ (80007d4 <bootloader_jump_to_user_app+0x5c>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fe1d 	bl	8001400 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80007c6:	f000 fe8f 	bl	80014e8 <HAL_FLASH_Lock>
	NVIC_SystemReset();
 80007ca:	f7ff ff8d 	bl	80006e8 <__NVIC_SystemReset>
 80007ce:	bf00      	nop
 80007d0:	08007ffe 	.word	0x08007ffe
 80007d4:	08007ffd 	.word	0x08007ffd

080007d8 <bootloader_handle_mem_write_cmd>:
uint8_t count=0;

//bank 1: 0x01 0x0800 8000
//bank 2: 0x02 0x0804 0000
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    uint8_t write_status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	77bb      	strb	r3, [r7, #30]
    uint8_t payload_len = pBuffer[2]; // Sửa: PAYLOAD LENGTH ở byte thứ 3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	777b      	strb	r3, [r7, #29]
    volatile uint8_t *bank_addr = (volatile uint8_t *)0x08007FFE;
 80007ea:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <bootloader_handle_mem_write_cmd+0x100>)
 80007ec:	61bb      	str	r3, [r7, #24]
    uint8_t bank_value = *bank_addr;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	77fb      	strb	r3, [r7, #31]

    // Khởi tạo bank nếu giá trị không hợp lệ
    if (bank_value != 0x01 && bank_value != 0x02)
 80007f4:	7ffb      	ldrb	r3, [r7, #31]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d005      	beq.n	8000806 <bootloader_handle_mem_write_cmd+0x2e>
 80007fa:	7ffb      	ldrb	r3, [r7, #31]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d002      	beq.n	8000806 <bootloader_handle_mem_write_cmd+0x2e>
    {
        bank_value = 0x01;
 8000800:	2301      	movs	r3, #1
 8000802:	77fb      	strb	r3, [r7, #31]
 8000804:	e006      	b.n	8000814 <bootloader_handle_mem_write_cmd+0x3c>
    }
    else
    {
    	bank_value = (bank_value == 0x01)? 0x02:0x01;
 8000806:	7ffb      	ldrb	r3, [r7, #31]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <bootloader_handle_mem_write_cmd+0x38>
 800080c:	2302      	movs	r3, #2
 800080e:	e000      	b.n	8000812 <bootloader_handle_mem_write_cmd+0x3a>
 8000810:	2301      	movs	r3, #1
 8000812:	77fb      	strb	r3, [r7, #31]
    }

    uint32_t start_addr = (bank_value == 0x01) ? 0x08008000 : 0x08040000;
 8000814:	7ffb      	ldrb	r3, [r7, #31]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d101      	bne.n	800081e <bootloader_handle_mem_write_cmd+0x46>
 800081a:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <bootloader_handle_mem_write_cmd+0x104>)
 800081c:	e000      	b.n	8000820 <bootloader_handle_mem_write_cmd+0x48>
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <bootloader_handle_mem_write_cmd+0x108>)
 8000820:	617b      	str	r3, [r7, #20]

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <bootloader_handle_mem_write_cmd+0x10c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	3b04      	subs	r3, #4
 800082e:	4a2d      	ldr	r2, [pc, #180]	@ (80008e4 <bootloader_handle_mem_write_cmd+0x10c>)
 8000830:	4413      	add	r3, r2
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3b04      	subs	r3, #4
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4619      	mov	r1, r3
 800083e:	4829      	ldr	r0, [pc, #164]	@ (80008e4 <bootloader_handle_mem_write_cmd+0x10c>)
 8000840:	f000 f882 	bl	8000948 <bootloader_verify_crc>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d139      	bne.n	80008be <bootloader_handle_mem_write_cmd+0xe6>
    {
//        printmsg("BL_DEBUG_MSG:checksum success !!\n");
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800084a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084e:	4826      	ldr	r0, [pc, #152]	@ (80008e8 <bootloader_handle_mem_write_cmd+0x110>)
 8000850:	f001 fa6f 	bl	8001d32 <HAL_GPIO_TogglePin>

        if (current_write_addr == 0)
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <bootloader_handle_mem_write_cmd+0x114>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d111      	bne.n	8000880 <bootloader_handle_mem_write_cmd+0xa8>
        {
            current_write_addr = start_addr;
 800085c:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <bootloader_handle_mem_write_cmd+0x114>)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	6013      	str	r3, [r2, #0]
            if(bank_value==0x01)
 8000862:	7ffb      	ldrb	r3, [r7, #31]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d104      	bne.n	8000872 <bootloader_handle_mem_write_cmd+0x9a>
            	execute_flash_erase(2, 4);
 8000868:	2104      	movs	r1, #4
 800086a:	2002      	movs	r0, #2
 800086c:	f000 f8d7 	bl	8000a1e <execute_flash_erase>
 8000870:	e006      	b.n	8000880 <bootloader_handle_mem_write_cmd+0xa8>
            else if (bank_value==0x02)
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d103      	bne.n	8000880 <bootloader_handle_mem_write_cmd+0xa8>
            	execute_flash_erase(6, 2);
 8000878:	2102      	movs	r1, #2
 800087a:	2006      	movs	r0, #6
 800087c:	f000 f8cf 	bl	8000a1e <execute_flash_erase>
        }

        if (payload_len > 0)
 8000880:	7f7b      	ldrb	r3, [r7, #29]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d016      	beq.n	80008b4 <bootloader_handle_mem_write_cmd+0xdc>
        {
            write_status = execute_mem_write(&pBuffer[3], current_write_addr, payload_len); // Sửa: PAYLOAD bắt đầu từ byte thứ 4
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3303      	adds	r3, #3
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <bootloader_handle_mem_write_cmd+0x114>)
 800088c:	6811      	ldr	r1, [r2, #0]
 800088e:	7f7a      	ldrb	r2, [r7, #29]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f897 	bl	80009c4 <execute_mem_write>
 8000896:	4603      	mov	r3, r0
 8000898:	77bb      	strb	r3, [r7, #30]
            current_write_addr += payload_len;
 800089a:	7f7a      	ldrb	r2, [r7, #29]
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <bootloader_handle_mem_write_cmd+0x114>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <bootloader_handle_mem_write_cmd+0x114>)
 80008a4:	6013      	str	r3, [r2, #0]
//            bootloader_uart_write_data(&write_status, 1);
            bootloader_send_ack(pBuffer[0], 1);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f81f 	bl	80008f0 <bootloader_send_ack>
    {
//        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
        bootloader_send_nack();
    }
}
 80008b2:	e00c      	b.n	80008ce <bootloader_handle_mem_write_cmd+0xf6>
            bootloader_jump_to_user_app(bank_value);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff5e 	bl	8000778 <bootloader_jump_to_user_app>
}
 80008bc:	e007      	b.n	80008ce <bootloader_handle_mem_write_cmd+0xf6>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <bootloader_handle_mem_write_cmd+0x110>)
 80008c6:	f001 fa1b 	bl	8001d00 <HAL_GPIO_WritePin>
        bootloader_send_nack();
 80008ca:	f000 f82b 	bl	8000924 <bootloader_send_nack>
}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08007ffe 	.word	0x08007ffe
 80008dc:	08008000 	.word	0x08008000
 80008e0:	08040000 	.word	0x08040000
 80008e4:	20000078 	.word	0x20000078
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	20000278 	.word	0x20000278

080008f0 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
    uint8_t ack_buf[2];
    ack_buf[0] = BL_ACK;
 8000900:	23a5      	movs	r3, #165	@ 0xa5
 8000902:	733b      	strb	r3, [r7, #12]
    ack_buf[1] = follow_len;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	737b      	strb	r3, [r7, #13]
    HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 8000908:	f107 010c 	add.w	r1, r7, #12
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	2202      	movs	r2, #2
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <bootloader_send_ack+0x30>)
 8000914:	f001 ff10 	bl	8002738 <HAL_UART_Transmit>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002cc 	.word	0x200002cc

08000924 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
    uint8_t nack = BL_NACK;
 800092a:	237f      	movs	r3, #127	@ 0x7f
 800092c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 800092e:	1df9      	adds	r1, r7, #7
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	2201      	movs	r2, #1
 8000936:	4803      	ldr	r0, [pc, #12]	@ (8000944 <bootloader_send_nack+0x20>)
 8000938:	f001 fefe 	bl	8002738 <HAL_UART_Transmit>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200002cc 	.word	0x200002cc

08000948 <bootloader_verify_crc>:


uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
//    printmsg("BL_DEBUG_MSG: Verifying CRC, len = %d\n", len);
    if (len > BL_RX_LEN)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800095a:	d901      	bls.n	8000960 <bootloader_verify_crc+0x18>
    {
//        printmsg("BL_DEBUG_MSG: CRC length exceeds buffer size!\n");
        return VERIFY_CRC_FAIL;
 800095c:	2301      	movs	r3, #1
 800095e:	e02b      	b.n	80009b8 <bootloader_verify_crc+0x70>
    }

    uint32_t uwCRCValue = 0xff;
 8000960:	23ff      	movs	r3, #255	@ 0xff
 8000962:	61fb      	str	r3, [r7, #28]
    uint32_t i = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
    uint32_t i_data=0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	e00f      	b.n	8000992 <bootloader_verify_crc+0x4a>
    {
        i_data = pData[i];
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	617b      	str	r3, [r7, #20]
//        printmsg("BL_DEBUG_MSG: Processing byte %d: %x\n", i, i_data);
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <bootloader_verify_crc+0x78>)
 8000986:	f000 fd10 	bl	80013aa <HAL_CRC_Accumulate>
 800098a:	61f8      	str	r0, [r7, #28]
    for (i = 0; i < len; i++)
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	3301      	adds	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3eb      	bcc.n	8000972 <bootloader_verify_crc+0x2a>
    }
    __HAL_CRC_DR_RESET(&hcrc);
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <bootloader_verify_crc+0x78>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <bootloader_verify_crc+0x78>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	609a      	str	r2, [r3, #8]

    return (uwCRCValue == crc_host) ? VERIFY_CRC_SUCCESS : VERIFY_CRC_FAIL;
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	bf14      	ite	ne
 80009b2:	2301      	movne	r3, #1
 80009b4:	2300      	moveq	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000027c 	.word	0x2000027c

080009c4 <execute_mem_write>:
{
    HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
}

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
    uint8_t status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]
    HAL_FLASH_Unlock();
 80009d4:	f000 fd66 	bl	80014a4 <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < len; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	e014      	b.n	8000a08 <execute_mem_write+0x44>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i, pBuffer[i]);
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	18d1      	adds	r1, r2, r3
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	461c      	mov	r4, r3
 80009f2:	4615      	mov	r5, r2
 80009f4:	4622      	mov	r2, r4
 80009f6:	462b      	mov	r3, r5
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fd01 	bl	8001400 <HAL_FLASH_Program>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
    for (uint32_t i = 0; i < len; i++)
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3301      	adds	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3e6      	bcc.n	80009de <execute_mem_write+0x1a>
    }
    HAL_FLASH_Lock();
 8000a10:	f000 fd6a 	bl	80014e8 <HAL_FLASH_Lock>
    return status;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdb0      	pop	{r4, r5, r7, pc}

08000a1e <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b08a      	sub	sp, #40	@ 0x28
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	460a      	mov	r2, r1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	71bb      	strb	r3, [r7, #6]
  // Code needs to modified if your MCU supports more flash sectors
  FLASH_EraseInitTypeDef flashErase_handle;
  uint32_t sectorError;
  HAL_StatusTypeDef status;

  if (number_of_sector > 8)
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d901      	bls.n	8000a38 <execute_flash_erase+0x1a>
    return INVALID_SECTOR;
 8000a34:	2300      	movs	r3, #0
 8000a36:	e035      	b.n	8000aa4 <execute_flash_erase+0x86>

  if ((sector_number == 0xff) || (sector_number <= 7))
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d002      	beq.n	8000a44 <execute_flash_erase+0x26>
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	d82e      	bhi.n	8000aa2 <execute_flash_erase+0x84>
  {
    if (sector_number == (uint8_t)0xff)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2bff      	cmp	r3, #255	@ 0xff
 8000a48:	d102      	bne.n	8000a50 <execute_flash_erase+0x32>
    {
      flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	e012      	b.n	8000a76 <execute_flash_erase+0x58>
    }
    else
    {
      /*Here we are just calculating how many sectors needs to erased */
      uint8_t remanining_sector = 8 - sector_number;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f1c3 0308 	rsb	r3, r3, #8
 8000a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if (number_of_sector > remanining_sector)
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d902      	bls.n	8000a6a <execute_flash_erase+0x4c>
      {
        number_of_sector = remanining_sector;
 8000a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a68:	71bb      	strb	r3, [r7, #6]
      }
      flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
      flashErase_handle.Sector = sector_number; // this is the initial sector
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	61bb      	str	r3, [r7, #24]
      flashErase_handle.NbSectors = number_of_sector;
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	61fb      	str	r3, [r7, #28]
    }
    flashErase_handle.Banks = FLASH_BANK_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]

    /*Get access to touch the flash registers */
    HAL_FLASH_Unlock();
 8000a7a:	f000 fd13 	bl	80014a4 <HAL_FLASH_Unlock>
    flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
    status = (uint8_t)HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000a82:	f107 020c 	add.w	r2, r7, #12
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fe7b 	bl	8001788 <HAL_FLASHEx_Erase>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    HAL_FLASH_Lock();
 8000a98:	f000 fd26 	bl	80014e8 <HAL_FLASH_Lock>

    return status;
 8000a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aa0:	e000      	b.n	8000aa4 <execute_flash_erase+0x86>
  }

  return INVALID_SECTOR;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <printmsg>:
#include "uart_log.h"


/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 8000aac:	b40f      	push	{r0, r1, r2, r3}
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b096      	sub	sp, #88	@ 0x58
 8000ab2:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000ab4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 faa0 	bl	8003008 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb87 	bl	80001e0 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	f107 0108 	add.w	r1, r7, #8
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <printmsg+0x48>)
 8000ae0:	f001 fe2a 	bl	8002738 <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000ae4:	bf00      	nop
 8000ae6:	3758      	adds	r7, #88	@ 0x58
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aee:	b004      	add	sp, #16
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000284 	.word	0x20000284

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fae1 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f81d 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f8fd 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b0a:	f000 f8a7 	bl	8000c5c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b0e:	f000 f8cf 	bl	8000cb0 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8000b12:	f000 f87d 	bl	8000c10 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if ( HAL_GPIO_ReadPin(TRIGGER_JUMP_TO_APP_GPIO_Port,TRIGGER_JUMP_TO_APP_Pin) == GPIO_PIN_RESET)
 8000b16:	2102      	movs	r1, #2
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <main+0x44>)
 8000b1a:	f001 f8d9 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <main+0x32>
  {
	  bootloader_uart_read_data();
 8000b24:	f7ff fdf6 	bl	8000714 <bootloader_uart_read_data>
 8000b28:	e006      	b.n	8000b38 <main+0x40>
  }
  else
  {
	  uint8_t bank = ((uint8_t *)0x08007FFE);
 8000b2a:	23fe      	movs	r3, #254	@ 0xfe
 8000b2c:	71fb      	strb	r3, [r7, #7]
	  bootloader_jump_to_user_app(bank);
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe21 	bl	8000778 <bootloader_jump_to_user_app>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <main+0x40>
 8000b3c:	40020800 	.word	0x40020800

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	@ 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fa64 	bl	800301c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <SystemClock_Config+0xc8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <SystemClock_Config+0xc8>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <SystemClock_Config+0xc8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb4:	233c      	movs	r3, #60	@ 0x3c
 8000bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f8cf 	bl	8001d68 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd0:	f000 f906 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fb31 	bl	8002258 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bfc:	f000 f8f0 	bl	8000de0 <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	@ 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <MX_CRC_Init+0x40>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <MX_CRC_Init+0x40>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <MX_CRC_Init+0x40>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_CRC_Init+0x44>)
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <MX_CRC_Init+0x48>)
 8000c36:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c38:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <MX_CRC_Init+0x44>)
 8000c3a:	f000 fb9a 	bl	8001372 <HAL_CRC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c44:	f000 f8cc 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	2000027c 	.word	0x2000027c
 8000c58:	40023000 	.word	0x40023000

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <MX_USART2_UART_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c94:	f001 fd00 	bl	8002698 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f89f 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000284 	.word	0x20000284
 8000cac:	40004400 	.word	0x40004400

08000cb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_USART6_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART6_UART_Init+0x4c>)
 8000ce8:	f001 fcd6 	bl	8002698 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f875 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200002cc 	.word	0x200002cc
 8000d00:	40011400 	.word	0x40011400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a25      	ldr	r2, [pc, #148]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d92:	f000 ffb5 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIGGER_JUMP_TO_APP_Pin */
  GPIO_InitStruct.Pin = TRIGGER_JUMP_TO_APP_Pin;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIGGER_JUMP_TO_APP_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <MX_GPIO_Init+0xd8>)
 8000daa:	f000 fe0d 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin;
 8000dae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_GPIO_Init+0xd4>)
 8000dc8:	f000 fdfe 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40020800 	.word	0x40020800

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <HAL_CRC_MspInit+0x3c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10d      	bne.n	8000e6a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_CRC_MspInit+0x40>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_CRC_MspInit+0x40>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_CRC_MspInit+0x40>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023000 	.word	0x40023000
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	@ 0x30
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <HAL_UART_MspInit+0xe8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12c      	bne.n	8000efc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a30      	ldr	r2, [pc, #192]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a29      	ldr	r2, [pc, #164]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eda:	230c      	movs	r3, #12
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481e      	ldr	r0, [pc, #120]	@ (8000f70 <HAL_UART_MspInit+0xf0>)
 8000ef6:	f000 fd67 	bl	80019c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000efa:	e030      	b.n	8000f5e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3e:	23c0      	movs	r3, #192	@ 0xc0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <HAL_UART_MspInit+0xf8>)
 8000f5a:	f000 fd35 	bl	80019c8 <HAL_GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	@ 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40011400 	.word	0x40011400
 8000f78:	40020800 	.word	0x40020800

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <NMI_Handler+0x4>

08000f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 f8c9 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f002 f80e 	bl	800302c <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20020000 	.word	0x20020000
 800103c:	00000400 	.word	0x00000400
 8001040:	20000314 	.word	0x20000314
 8001044:	20000488 	.word	0x20000488

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 800106c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010a8 <LoopFillZerobss+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	@ (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	@ (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f001 ffcd 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  check_and_jump_boot_mode
 800109e:	f7ff fa8d 	bl	80005bc <check_and_jump_boot_mode>
  bl  main
 80010a2:	f7ff fd29 	bl	8000af8 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010b4:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 80010b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010bc:	20000484 	.word	0x20000484

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f90d 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe78 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f917 	bl	800135a <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f8ed 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	20000318 	.word	0x20000318

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000318 	.word	0x20000318

080011a8 <__NVIC_SetPriorityGrouping>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_SetPriority>:
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff47 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5c 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb0 	bl	80012c8 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00e      	b.n	80013a2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	795b      	ldrb	r3, [r3, #5]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fd51 	bl	8000e3c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2202      	movs	r2, #2
 80013be:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e00a      	b.n	80013dc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	441a      	add	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3f0      	bcc.n	80013c6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <HAL_FLASH_Program+0x9c>)
 8001410:	7e1b      	ldrb	r3, [r3, #24]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_FLASH_Program+0x1a>
 8001416:	2302      	movs	r3, #2
 8001418:	e03b      	b.n	8001492 <HAL_FLASH_Program+0x92>
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_FLASH_Program+0x9c>)
 800141c:	2201      	movs	r2, #1
 800141e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001420:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001424:	f000 f870 	bl	8001508 <FLASH_WaitForLastOperation>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d12b      	bne.n	800148a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001438:	783b      	ldrb	r3, [r7, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f000 f91b 	bl	8001678 <FLASH_Program_Byte>
 8001442:	e016      	b.n	8001472 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	68b8      	ldr	r0, [r7, #8]
 8001450:	f000 f8ee 	bl	8001630 <FLASH_Program_HalfWord>
 8001454:	e00d      	b.n	8001472 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d105      	bne.n	8001468 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 f8c3 	bl	80015ec <FLASH_Program_Word>
 8001466:	e004      	b.n	8001472 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f000 f88b 	bl	8001588 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001472:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001476:	f000 f847 	bl	8001508 <FLASH_WaitForLastOperation>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <HAL_FLASH_Program+0xa0>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_FLASH_Program+0xa0>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <HAL_FLASH_Program+0x9c>)
 800148c:	2200      	movs	r2, #0
 800148e:	761a      	strb	r2, [r3, #24]

  return status;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000031c 	.word	0x2000031c
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_FLASH_Unlock+0x38>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da0b      	bge.n	80014ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_FLASH_Unlock+0x38>)
 80014b8:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_FLASH_Unlock+0x3c>)
 80014ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <HAL_FLASH_Unlock+0x38>)
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_FLASH_Unlock+0x40>)
 80014c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_FLASH_Unlock+0x38>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da01      	bge.n	80014ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023c00 	.word	0x40023c00
 80014e0:	45670123 	.word	0x45670123
 80014e4:	cdef89ab 	.word	0xcdef89ab

080014e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_FLASH_Lock+0x1c>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <HAL_FLASH_Lock+0x1c>)
 80014f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014f6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40023c00 	.word	0x40023c00

08001508 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <FLASH_WaitForLastOperation+0x78>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800151a:	f7ff fe39 	bl	8001190 <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001520:	e010      	b.n	8001544 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d00c      	beq.n	8001544 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <FLASH_WaitForLastOperation+0x38>
 8001530:	f7ff fe2e 	bl	8001190 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d201      	bcs.n	8001544 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e019      	b.n	8001578 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e8      	bne.n	8001522 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <FLASH_WaitForLastOperation+0x7c>)
 800155e:	2201      	movs	r2, #1
 8001560:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800156e:	f000 f8a5 	bl	80016bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0

}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000031c 	.word	0x2000031c
 8001584:	40023c00 	.word	0x40023c00

08001588 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 800159a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800159e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 80015a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80015aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <FLASH_Program_DoubleWord+0x60>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80015be:	f3bf 8f6f 	isb	sy
}
 80015c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80015c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	000a      	movs	r2, r1
 80015d2:	2300      	movs	r3, #0
 80015d4:	68f9      	ldr	r1, [r7, #12]
 80015d6:	3104      	adds	r1, #4
 80015d8:	4613      	mov	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023c00 	.word	0x40023c00

080015ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <FLASH_Program_Word+0x40>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <FLASH_Program_Word+0x40>)
 80015fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001600:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <FLASH_Program_Word+0x40>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <FLASH_Program_Word+0x40>)
 8001608:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <FLASH_Program_Word+0x40>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	4a06      	ldr	r2, [pc, #24]	@ (800162c <FLASH_Program_Word+0x40>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023c00 	.word	0x40023c00

08001630 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800163c:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 8001642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001646:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <FLASH_Program_HalfWord+0x44>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	801a      	strh	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4a0b      	ldr	r2, [pc, #44]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 800168a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800168e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 8001692:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <FLASH_Program_Byte+0x40>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00

080016bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 80016d6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 80016da:	2210      	movs	r2, #16
 80016dc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 80016f4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 80016f8:	2220      	movs	r2, #32
 80016fa:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016fc:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 8001712:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 8001730:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 800174e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 8001752:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001756:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <FLASH_SetErrorCode+0xc8>)
 800176e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <FLASH_SetErrorCode+0xc4>)
 8001772:	2202      	movs	r2, #2
 8001774:	60da      	str	r2, [r3, #12]
  }
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40023c00 	.word	0x40023c00
 8001784:	2000031c 	.word	0x2000031c

08001788 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <HAL_FLASHEx_Erase+0xd4>)
 8001798:	7e1b      	ldrb	r3, [r3, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_FLASHEx_Erase+0x1a>
 800179e:	2302      	movs	r3, #2
 80017a0:	e058      	b.n	8001854 <HAL_FLASHEx_Erase+0xcc>
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <HAL_FLASHEx_Erase+0xd4>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017ac:	f7ff feac 	bl	8001508 <FLASH_WaitForLastOperation>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d148      	bne.n	800184c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d115      	bne.n	80017f6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 f844 	bl	8001864 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017e0:	f7ff fe92 	bl	8001508 <FLASH_WaitForLastOperation>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_FLASHEx_Erase+0xd8>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_FLASHEx_Erase+0xd8>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6113      	str	r3, [r2, #16]
 80017f4:	e028      	b.n	8001848 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	e01c      	b.n	8001838 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	68b8      	ldr	r0, [r7, #8]
 8001808:	f000 f850 	bl	80018ac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800180c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001810:	f7ff fe7a 	bl	8001508 <FLASH_WaitForLastOperation>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_FLASHEx_Erase+0xd8>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_FLASHEx_Erase+0xd8>)
 800181e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001822:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	601a      	str	r2, [r3, #0]
          break;
 8001830:	e00a      	b.n	8001848 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4413      	add	r3, r2
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3da      	bcc.n	80017fe <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001848:	f000 f878 	bl	800193c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_FLASHEx_Erase+0xd4>)
 800184e:	2200      	movs	r2, #0
 8001850:	761a      	strb	r2, [r3, #24]

  return status;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000031c 	.word	0x2000031c
 8001860:	40023c00 	.word	0x40023c00

08001864 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <FLASH_MassErase+0x44>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <FLASH_MassErase+0x44>)
 8001876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800187a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <FLASH_MassErase+0x44>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a09      	ldr	r2, [pc, #36]	@ (80018a8 <FLASH_MassErase+0x44>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <FLASH_MassErase+0x44>)
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	4313      	orrs	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <FLASH_MassErase+0x44>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6113      	str	r3, [r2, #16]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e010      	b.n	80018ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d103      	bne.n	80018d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e009      	b.n	80018ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d103      	bne.n	80018e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e002      	b.n	80018ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 80018f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	490f      	ldr	r1, [pc, #60]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 8001908:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800190c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4313      	orrs	r3, r2
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <FLASH_Erase_Sector+0x8c>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192a:	6113      	str	r3, [r2, #16]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023c00 	.word	0x40023c00

0800193c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001948:	2b00      	cmp	r3, #0
 800194a:	d017      	beq.n	800197c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001952:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800195e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800196a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800196e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d017      	beq.n	80019b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800198e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001992:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 800199a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 80019a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <FLASH_FlushCaches+0x88>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b6:	6013      	str	r3, [r2, #0]
  }
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e159      	b.n	8001c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8148 	bne.w	8001c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a2 	beq.w	8001c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b57      	ldr	r3, [pc, #348]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a56      	ldr	r2, [pc, #344]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x202>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a48      	ldr	r2, [pc, #288]	@ (8001cbc <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a47      	ldr	r2, [pc, #284]	@ (8001cc0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	@ (8001cc4 <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x1f6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	@ (8001cc8 <HAL_GPIO_Init+0x300>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x1f2>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	@ (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b38      	ldr	r3, [pc, #224]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a24      	ldr	r2, [pc, #144]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f aea2 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	400b      	ands	r3, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e267      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d075      	beq.n	8001e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d86:	4b88      	ldr	r3, [pc, #544]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d00c      	beq.n	8001dac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d112      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9e:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001daa:	d10b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d05b      	beq.n	8001e70 <HAL_RCC_OscConfig+0x108>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d157      	bne.n	8001e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e242      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x74>
 8001dce:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a75      	ldr	r2, [pc, #468]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xb0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x98>
 8001de6:	4b70      	ldr	r3, [pc, #448]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6f      	ldr	r2, [pc, #444]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6c      	ldr	r2, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xb0>
 8001e00:	4b69      	ldr	r3, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a68      	ldr	r2, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff f9b6 	bl	8001190 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f9b2 	bl	8001190 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e207      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xc0>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f9a2 	bl	8001190 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff f99e 	bl	8001190 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1f3      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0xe8>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b47      	ldr	r3, [pc, #284]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e96:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b41      	ldr	r3, [pc, #260]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x152>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1c7      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4937      	ldr	r1, [pc, #220]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e03a      	b.n	8001f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b34      	ldr	r3, [pc, #208]	@ (8001fac <HAL_RCC_OscConfig+0x244>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f957 	bl	8001190 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f953 	bl	8001190 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1a8      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4925      	ldr	r1, [pc, #148]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_RCC_OscConfig+0x244>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f936 	bl	8001190 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff f932 	bl	8001190 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e187      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d036      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_RCC_OscConfig+0x248>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff f916 	bl	8001190 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff f912 	bl	8001190 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e167      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x200>
 8001f86:	e01b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_RCC_OscConfig+0x248>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f8ff 	bl	8001190 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	e00e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff f8fb 	bl	8001190 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d907      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e150      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	42470000 	.word	0x42470000
 8001fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b88      	ldr	r3, [pc, #544]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ea      	bne.n	8001f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8097 	beq.w	80020fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b81      	ldr	r3, [pc, #516]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10f      	bne.n	8001ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b7a      	ldr	r3, [pc, #488]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b77      	ldr	r3, [pc, #476]	@ (80021dc <HAL_RCC_OscConfig+0x474>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b74      	ldr	r3, [pc, #464]	@ (80021dc <HAL_RCC_OscConfig+0x474>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a73      	ldr	r2, [pc, #460]	@ (80021dc <HAL_RCC_OscConfig+0x474>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff f8bb 	bl	8001190 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff f8b7 	bl	8001190 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e10c      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b6a      	ldr	r3, [pc, #424]	@ (80021dc <HAL_RCC_OscConfig+0x474>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x2ea>
 8002044:	4b64      	ldr	r3, [pc, #400]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a63      	ldr	r2, [pc, #396]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x324>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x30c>
 800205a:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a5e      	ldr	r2, [pc, #376]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	4a5b      	ldr	r2, [pc, #364]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6713      	str	r3, [r2, #112]	@ 0x70
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x324>
 8002074:	4b58      	ldr	r3, [pc, #352]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4a57      	ldr	r2, [pc, #348]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002080:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4a54      	ldr	r2, [pc, #336]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f87c 	bl	8001190 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f878 	bl	8001190 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0cb      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ee      	beq.n	800209c <HAL_RCC_OscConfig+0x334>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff f866 	bl	8001190 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff f862 	bl	8001190 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0b5      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020de:	4b3e      	ldr	r3, [pc, #248]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ee      	bne.n	80020c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	4a38      	ldr	r2, [pc, #224]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a1 	beq.w	8002248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002106:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d05c      	beq.n	80021cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d141      	bne.n	800219e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_RCC_OscConfig+0x478>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f836 	bl	8001190 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f832 	bl	8001190 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e087      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	491b      	ldr	r1, [pc, #108]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <HAL_RCC_OscConfig+0x478>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff f80b 	bl	8001190 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff f807 	bl	8001190 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e05c      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x416>
 800219c:	e054      	b.n	8002248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <HAL_RCC_OscConfig+0x478>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fff4 	bl	8001190 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fff0 	bl	8001190 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e045      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_OscConfig+0x470>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x444>
 80021ca:	e03d      	b.n	8002248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e038      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x4ec>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d028      	beq.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d121      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800221a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	4293      	cmp	r3, r2
 800221e:	d111      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0cc      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d90c      	bls.n	8002294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b65      	ldr	r3, [pc, #404]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a58      	ldr	r2, [pc, #352]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a52      	ldr	r2, [pc, #328]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d119      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002312:	2b03      	cmp	r3, #3
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3b      	ldr	r3, [pc, #236]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e067      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4934      	ldr	r1, [pc, #208]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7fe ff22 	bl	8001190 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe ff1e 	bl	8001190 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e04f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d20c      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490a      	ldr	r1, [pc, #40]	@ (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	@ (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe82 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00
 8002414:	40023800 	.word	0x40023800
 8002418:	08003968 	.word	0x08003968
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002428:	b094      	sub	sp, #80	@ 0x50
 800242a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243c:	4b79      	ldr	r3, [pc, #484]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d00d      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 8002448:	2b08      	cmp	r3, #8
 800244a:	f200 80e1 	bhi.w	8002610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x34>
 8002452:	2b04      	cmp	r3, #4
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x3a>
 8002456:	e0db      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b73      	ldr	r3, [pc, #460]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x204>)
 800245a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800245c:	e0db      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245e:	4b73      	ldr	r3, [pc, #460]	@ (800262c <HAL_RCC_GetSysClockFreq+0x208>)
 8002460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002462:	e0d8      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800246c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246e:	4b6d      	ldr	r3, [pc, #436]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247a:	4b6a      	ldr	r3, [pc, #424]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	2200      	movs	r2, #0
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248c:	633b      	str	r3, [r7, #48]	@ 0x30
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
 8002492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002496:	4622      	mov	r2, r4
 8002498:	462b      	mov	r3, r5
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	0159      	lsls	r1, r3, #5
 80024a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a8:	0150      	lsls	r0, r2, #5
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4621      	mov	r1, r4
 80024b0:	1a51      	subs	r1, r2, r1
 80024b2:	6139      	str	r1, [r7, #16]
 80024b4:	4629      	mov	r1, r5
 80024b6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c8:	4659      	mov	r1, fp
 80024ca:	018b      	lsls	r3, r1, #6
 80024cc:	4651      	mov	r1, sl
 80024ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d2:	4651      	mov	r1, sl
 80024d4:	018a      	lsls	r2, r1, #6
 80024d6:	4651      	mov	r1, sl
 80024d8:	ebb2 0801 	subs.w	r8, r2, r1
 80024dc:	4659      	mov	r1, fp
 80024de:	eb63 0901 	sbc.w	r9, r3, r1
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f6:	4690      	mov	r8, r2
 80024f8:	4699      	mov	r9, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	eb18 0303 	adds.w	r3, r8, r3
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	462b      	mov	r3, r5
 8002504:	eb49 0303 	adc.w	r3, r9, r3
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002516:	4629      	mov	r1, r5
 8002518:	024b      	lsls	r3, r1, #9
 800251a:	4621      	mov	r1, r4
 800251c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002520:	4621      	mov	r1, r4
 8002522:	024a      	lsls	r2, r1, #9
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800252a:	2200      	movs	r2, #0
 800252c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002534:	f7fd feac 	bl	8000290 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002540:	e058      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002542:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	2200      	movs	r2, #0
 800254a:	4618      	mov	r0, r3
 800254c:	4611      	mov	r1, r2
 800254e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
 8002558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	f04f 0000 	mov.w	r0, #0
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	0159      	lsls	r1, r3, #5
 800256a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256e:	0150      	lsls	r0, r2, #5
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4641      	mov	r1, r8
 8002576:	ebb2 0a01 	subs.w	sl, r2, r1
 800257a:	4649      	mov	r1, r9
 800257c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800258c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002594:	ebb2 040a 	subs.w	r4, r2, sl
 8002598:	eb63 050b 	sbc.w	r5, r3, fp
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	00eb      	lsls	r3, r5, #3
 80025a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025aa:	00e2      	lsls	r2, r4, #3
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4643      	mov	r3, r8
 80025b2:	18e3      	adds	r3, r4, r3
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	464b      	mov	r3, r9
 80025b8:	eb45 0303 	adc.w	r3, r5, r3
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	61fa      	str	r2, [r7, #28]
 80025e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e8:	f7fd fe52 	bl	8000290 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x204>)
 8002612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002618:	4618      	mov	r0, r3
 800261a:	3750      	adds	r7, #80	@ 0x50
 800261c:	46bd      	mov	sp, r7
 800261e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff0 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	08003978 	.word	0x08003978

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002674:	f7ff ffdc 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0b5b      	lsrs	r3, r3, #13
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	08003978 	.word	0x08003978

08002698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e042      	b.n	8002730 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fbde 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	@ 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fa09 	bl	8002af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d175      	bne.n	8002844 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Transmit+0x2c>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e06e      	b.n	8002846 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	@ 0x21
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002776:	f7fe fd0b 	bl	8001190 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002790:	d108      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e003      	b.n	80027ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ac:	e02e      	b.n	800280c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	@ 0x80
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f8df 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03a      	b.n	8002846 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3302      	adds	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e007      	b.n	80027fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3301      	adds	r3, #1
 80027fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1cb      	bne.n	80027ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2140      	movs	r1, #64	@ 0x40
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f8ab 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b08a      	sub	sp, #40	@ 0x28
 8002852:	af02      	add	r7, sp, #8
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 8081 	bne.w	8002972 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Receive+0x2e>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e079      	b.n	8002974 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2222      	movs	r2, #34	@ 0x22
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002894:	f7fe fc7c 	bl	8001190 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ae:	d108      	bne.n	80028c2 <HAL_UART_Receive+0x74>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	e003      	b.n	80028ca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028ca:	e047      	b.n	800295c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2120      	movs	r1, #32
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f850 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e042      	b.n	8002974 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3302      	adds	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e01f      	b.n	800294e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d007      	beq.n	8002928 <HAL_UART_Receive+0xda>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_UART_Receive+0xe8>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e008      	b.n	8002948 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002942:	b2da      	uxtb	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1b2      	bne.n	80028cc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	e03b      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d037      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe fbfb 	bl	8001190 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	6a3a      	ldr	r2, [r7, #32]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <UART_WaitOnFlagUntilTimeout+0x30>
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e03a      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d023      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b80      	cmp	r3, #128	@ 0x80
 80029c2:	d020      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d01d      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d116      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f81d 	bl	8002a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2208      	movs	r2, #8
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d0b4      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b095      	sub	sp, #84	@ 0x54
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a56:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d119      	bne.n	8002ada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 0310 	bic.w	r3, r3, #16
 8002abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ac6:	61ba      	str	r2, [r7, #24]
 8002ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e5      	bne.n	8002aa6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ae8:	bf00      	nop
 8002aea:	3754      	adds	r7, #84	@ 0x54
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b0c0      	sub	sp, #256	@ 0x100
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	ea40 0301 	orr.w	r3, r0, r1
 8002b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b4c:	f021 010c 	bic.w	r1, r1, #12
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	6999      	ldr	r1, [r3, #24]
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	ea40 0301 	orr.w	r3, r0, r1
 8002b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d005      	beq.n	8002b94 <UART_SetConfig+0xa0>
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <UART_SetConfig+0x2d0>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d104      	bne.n	8002b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff fd6c 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8002b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b9c:	e003      	b.n	8002ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f7ff fd53 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8002ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb0:	f040 810c 	bne.w	8002dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	eb12 0801 	adds.w	r8, r2, r1
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb43 0901 	adc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c04:	462b      	mov	r3, r5
 8002c06:	eb49 0303 	adc.w	r3, r9, r3
 8002c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c22:	460b      	mov	r3, r1
 8002c24:	18db      	adds	r3, r3, r3
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c28:	4613      	mov	r3, r2
 8002c2a:	eb42 0303 	adc.w	r3, r2, r3
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c38:	f7fd fb2a 	bl	8000290 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b61      	ldr	r3, [pc, #388]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c64:	415b      	adcs	r3, r3
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb43 0b01 	adc.w	fp, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8c:	4692      	mov	sl, r2
 8002c8e:	469b      	mov	fp, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	eb1a 0303 	adds.w	r3, sl, r3
 8002c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cce:	f7fd fadf 	bl	8000290 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cda:	fba3 2301 	umull	r2, r3, r3, r1
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2264      	movs	r2, #100	@ 0x64
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	1acb      	subs	r3, r1, r3
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cee:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d20:	4641      	mov	r1, r8
 8002d22:	1851      	adds	r1, r2, r1
 8002d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d26:	4649      	mov	r1, r9
 8002d28:	414b      	adcs	r3, r1
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d38:	4659      	mov	r1, fp
 8002d3a:	00cb      	lsls	r3, r1, #3
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d42:	4651      	mov	r1, sl
 8002d44:	00ca      	lsls	r2, r1, #3
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d54:	464b      	mov	r3, r9
 8002d56:	460a      	mov	r2, r1
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d74:	460b      	mov	r3, r1
 8002d76:	18db      	adds	r3, r3, r3
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d8a:	f7fd fa81 	bl	8000290 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3332      	adds	r3, #50	@ 0x32
 8002da6:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4422      	add	r2, r4
 8002dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dbc:	e106      	b.n	8002fcc <UART_SetConfig+0x4d8>
 8002dbe:	bf00      	nop
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dde:	4642      	mov	r2, r8
 8002de0:	464b      	mov	r3, r9
 8002de2:	1891      	adds	r1, r2, r2
 8002de4:	6239      	str	r1, [r7, #32]
 8002de6:	415b      	adcs	r3, r3
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dee:	4641      	mov	r1, r8
 8002df0:	1854      	adds	r4, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb43 0501 	adc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e14:	464b      	mov	r3, r9
 8002e16:	eb45 0303 	adc.w	r3, r5, r3
 8002e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	008b      	lsls	r3, r1, #2
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e44:	4621      	mov	r1, r4
 8002e46:	008a      	lsls	r2, r1, #2
 8002e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e4c:	f7fd fa20 	bl	8000290 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011c      	lsls	r4, r3, #4
 8002e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	61b9      	str	r1, [r7, #24]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6139      	str	r1, [r7, #16]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	460a      	mov	r2, r1
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ed8:	4649      	mov	r1, r9
 8002eda:	008b      	lsls	r3, r1, #2
 8002edc:	4641      	mov	r1, r8
 8002ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	008a      	lsls	r2, r1, #2
 8002ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eea:	f7fd f9d1 	bl	8000290 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2264      	movs	r2, #100	@ 0x64
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	1acb      	subs	r3, r1, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	3332      	adds	r3, #50	@ 0x32
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f14:	441c      	add	r4, r3
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f34:	4641      	mov	r1, r8
 8002f36:	1851      	adds	r1, r2, r1
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	414b      	adcs	r3, r1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	00cb      	lsls	r3, r1, #3
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f56:	4651      	mov	r1, sl
 8002f58:	00ca      	lsls	r2, r1, #3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4642      	mov	r2, r8
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f66:	464b      	mov	r3, r9
 8002f68:	460a      	mov	r2, r1
 8002f6a:	eb42 0303 	adc.w	r3, r2, r3
 8002f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f9a:	f7fd f979 	bl	8000290 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	@ 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	@ 0x32
 8002fb6:	4a08      	ldr	r2, [pc, #32]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4422      	add	r2, r4
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd8:	51eb851f 	.word	0x51eb851f

08002fdc <_vsiprintf_r>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	b09a      	sub	sp, #104	@ 0x68
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	9104      	str	r1, [sp, #16]
 8002fe6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002fea:	9105      	str	r1, [sp, #20]
 8002fec:	9102      	str	r1, [sp, #8]
 8002fee:	4905      	ldr	r1, [pc, #20]	@ (8003004 <_vsiprintf_r+0x28>)
 8002ff0:	9103      	str	r1, [sp, #12]
 8002ff2:	4669      	mov	r1, sp
 8002ff4:	9419      	str	r4, [sp, #100]	@ 0x64
 8002ff6:	f000 f999 	bl	800332c <_svfiprintf_r>
 8002ffa:	9b00      	ldr	r3, [sp, #0]
 8002ffc:	701c      	strb	r4, [r3, #0]
 8002ffe:	b01a      	add	sp, #104	@ 0x68
 8003000:	bd10      	pop	{r4, pc}
 8003002:	bf00      	nop
 8003004:	ffff0208 	.word	0xffff0208

08003008 <vsiprintf>:
 8003008:	4613      	mov	r3, r2
 800300a:	460a      	mov	r2, r1
 800300c:	4601      	mov	r1, r0
 800300e:	4802      	ldr	r0, [pc, #8]	@ (8003018 <vsiprintf+0x10>)
 8003010:	6800      	ldr	r0, [r0, #0]
 8003012:	f7ff bfe3 	b.w	8002fdc <_vsiprintf_r>
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c

0800301c <memset>:
 800301c:	4402      	add	r2, r0
 800301e:	4603      	mov	r3, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <__errno>:
 800302c:	4b01      	ldr	r3, [pc, #4]	@ (8003034 <__errno+0x8>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000000c 	.word	0x2000000c

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4d0d      	ldr	r5, [pc, #52]	@ (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	@ (8003074 <__libc_init_array+0x3c>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2600      	movs	r6, #0
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4d0b      	ldr	r5, [pc, #44]	@ (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	@ (800307c <__libc_init_array+0x44>)
 800304c:	f000 fc64 	bl	8003918 <_init>
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2600      	movs	r6, #0
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	080039bc 	.word	0x080039bc
 8003074:	080039bc 	.word	0x080039bc
 8003078:	080039bc 	.word	0x080039bc
 800307c:	080039c0 	.word	0x080039c0

08003080 <__retarget_lock_acquire_recursive>:
 8003080:	4770      	bx	lr

08003082 <__retarget_lock_release_recursive>:
 8003082:	4770      	bx	lr

08003084 <_free_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4605      	mov	r5, r0
 8003088:	2900      	cmp	r1, #0
 800308a:	d041      	beq.n	8003110 <_free_r+0x8c>
 800308c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003090:	1f0c      	subs	r4, r1, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	18e4      	addlt	r4, r4, r3
 8003098:	f000 f8e0 	bl	800325c <__malloc_lock>
 800309c:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <_free_r+0x90>)
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	b933      	cbnz	r3, 80030b0 <_free_r+0x2c>
 80030a2:	6063      	str	r3, [r4, #4]
 80030a4:	6014      	str	r4, [r2, #0]
 80030a6:	4628      	mov	r0, r5
 80030a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ac:	f000 b8dc 	b.w	8003268 <__malloc_unlock>
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	d908      	bls.n	80030c6 <_free_r+0x42>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	1821      	adds	r1, r4, r0
 80030b8:	428b      	cmp	r3, r1
 80030ba:	bf01      	itttt	eq
 80030bc:	6819      	ldreq	r1, [r3, #0]
 80030be:	685b      	ldreq	r3, [r3, #4]
 80030c0:	1809      	addeq	r1, r1, r0
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	e7ed      	b.n	80030a2 <_free_r+0x1e>
 80030c6:	461a      	mov	r2, r3
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b10b      	cbz	r3, 80030d0 <_free_r+0x4c>
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d9fa      	bls.n	80030c6 <_free_r+0x42>
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	1850      	adds	r0, r2, r1
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d10b      	bne.n	80030f0 <_free_r+0x6c>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	4401      	add	r1, r0
 80030dc:	1850      	adds	r0, r2, r1
 80030de:	4283      	cmp	r3, r0
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	d1e0      	bne.n	80030a6 <_free_r+0x22>
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	6053      	str	r3, [r2, #4]
 80030ea:	4408      	add	r0, r1
 80030ec:	6010      	str	r0, [r2, #0]
 80030ee:	e7da      	b.n	80030a6 <_free_r+0x22>
 80030f0:	d902      	bls.n	80030f8 <_free_r+0x74>
 80030f2:	230c      	movs	r3, #12
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	e7d6      	b.n	80030a6 <_free_r+0x22>
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	1821      	adds	r1, r4, r0
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf04      	itt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	bf04      	itt	eq
 8003108:	1809      	addeq	r1, r1, r0
 800310a:	6021      	streq	r1, [r4, #0]
 800310c:	6054      	str	r4, [r2, #4]
 800310e:	e7ca      	b.n	80030a6 <_free_r+0x22>
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	bf00      	nop
 8003114:	20000480 	.word	0x20000480

08003118 <sbrk_aligned>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4e0f      	ldr	r6, [pc, #60]	@ (8003158 <sbrk_aligned+0x40>)
 800311c:	460c      	mov	r4, r1
 800311e:	6831      	ldr	r1, [r6, #0]
 8003120:	4605      	mov	r5, r0
 8003122:	b911      	cbnz	r1, 800312a <sbrk_aligned+0x12>
 8003124:	f000 fba4 	bl	8003870 <_sbrk_r>
 8003128:	6030      	str	r0, [r6, #0]
 800312a:	4621      	mov	r1, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 fb9f 	bl	8003870 <_sbrk_r>
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	d103      	bne.n	800313e <sbrk_aligned+0x26>
 8003136:	f04f 34ff 	mov.w	r4, #4294967295
 800313a:	4620      	mov	r0, r4
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	1cc4      	adds	r4, r0, #3
 8003140:	f024 0403 	bic.w	r4, r4, #3
 8003144:	42a0      	cmp	r0, r4
 8003146:	d0f8      	beq.n	800313a <sbrk_aligned+0x22>
 8003148:	1a21      	subs	r1, r4, r0
 800314a:	4628      	mov	r0, r5
 800314c:	f000 fb90 	bl	8003870 <_sbrk_r>
 8003150:	3001      	adds	r0, #1
 8003152:	d1f2      	bne.n	800313a <sbrk_aligned+0x22>
 8003154:	e7ef      	b.n	8003136 <sbrk_aligned+0x1e>
 8003156:	bf00      	nop
 8003158:	2000047c 	.word	0x2000047c

0800315c <_malloc_r>:
 800315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003160:	1ccd      	adds	r5, r1, #3
 8003162:	f025 0503 	bic.w	r5, r5, #3
 8003166:	3508      	adds	r5, #8
 8003168:	2d0c      	cmp	r5, #12
 800316a:	bf38      	it	cc
 800316c:	250c      	movcc	r5, #12
 800316e:	2d00      	cmp	r5, #0
 8003170:	4606      	mov	r6, r0
 8003172:	db01      	blt.n	8003178 <_malloc_r+0x1c>
 8003174:	42a9      	cmp	r1, r5
 8003176:	d904      	bls.n	8003182 <_malloc_r+0x26>
 8003178:	230c      	movs	r3, #12
 800317a:	6033      	str	r3, [r6, #0]
 800317c:	2000      	movs	r0, #0
 800317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003258 <_malloc_r+0xfc>
 8003186:	f000 f869 	bl	800325c <__malloc_lock>
 800318a:	f8d8 3000 	ldr.w	r3, [r8]
 800318e:	461c      	mov	r4, r3
 8003190:	bb44      	cbnz	r4, 80031e4 <_malloc_r+0x88>
 8003192:	4629      	mov	r1, r5
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff ffbf 	bl	8003118 <sbrk_aligned>
 800319a:	1c43      	adds	r3, r0, #1
 800319c:	4604      	mov	r4, r0
 800319e:	d158      	bne.n	8003252 <_malloc_r+0xf6>
 80031a0:	f8d8 4000 	ldr.w	r4, [r8]
 80031a4:	4627      	mov	r7, r4
 80031a6:	2f00      	cmp	r7, #0
 80031a8:	d143      	bne.n	8003232 <_malloc_r+0xd6>
 80031aa:	2c00      	cmp	r4, #0
 80031ac:	d04b      	beq.n	8003246 <_malloc_r+0xea>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	4639      	mov	r1, r7
 80031b2:	4630      	mov	r0, r6
 80031b4:	eb04 0903 	add.w	r9, r4, r3
 80031b8:	f000 fb5a 	bl	8003870 <_sbrk_r>
 80031bc:	4581      	cmp	r9, r0
 80031be:	d142      	bne.n	8003246 <_malloc_r+0xea>
 80031c0:	6821      	ldr	r1, [r4, #0]
 80031c2:	1a6d      	subs	r5, r5, r1
 80031c4:	4629      	mov	r1, r5
 80031c6:	4630      	mov	r0, r6
 80031c8:	f7ff ffa6 	bl	8003118 <sbrk_aligned>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d03a      	beq.n	8003246 <_malloc_r+0xea>
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	442b      	add	r3, r5
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	f8d8 3000 	ldr.w	r3, [r8]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	bb62      	cbnz	r2, 8003238 <_malloc_r+0xdc>
 80031de:	f8c8 7000 	str.w	r7, [r8]
 80031e2:	e00f      	b.n	8003204 <_malloc_r+0xa8>
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	1b52      	subs	r2, r2, r5
 80031e8:	d420      	bmi.n	800322c <_malloc_r+0xd0>
 80031ea:	2a0b      	cmp	r2, #11
 80031ec:	d917      	bls.n	800321e <_malloc_r+0xc2>
 80031ee:	1961      	adds	r1, r4, r5
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	6025      	str	r5, [r4, #0]
 80031f4:	bf18      	it	ne
 80031f6:	6059      	strne	r1, [r3, #4]
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	bf08      	it	eq
 80031fc:	f8c8 1000 	streq.w	r1, [r8]
 8003200:	5162      	str	r2, [r4, r5]
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	4630      	mov	r0, r6
 8003206:	f000 f82f 	bl	8003268 <__malloc_unlock>
 800320a:	f104 000b 	add.w	r0, r4, #11
 800320e:	1d23      	adds	r3, r4, #4
 8003210:	f020 0007 	bic.w	r0, r0, #7
 8003214:	1ac2      	subs	r2, r0, r3
 8003216:	bf1c      	itt	ne
 8003218:	1a1b      	subne	r3, r3, r0
 800321a:	50a3      	strne	r3, [r4, r2]
 800321c:	e7af      	b.n	800317e <_malloc_r+0x22>
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	42a3      	cmp	r3, r4
 8003222:	bf0c      	ite	eq
 8003224:	f8c8 2000 	streq.w	r2, [r8]
 8003228:	605a      	strne	r2, [r3, #4]
 800322a:	e7eb      	b.n	8003204 <_malloc_r+0xa8>
 800322c:	4623      	mov	r3, r4
 800322e:	6864      	ldr	r4, [r4, #4]
 8003230:	e7ae      	b.n	8003190 <_malloc_r+0x34>
 8003232:	463c      	mov	r4, r7
 8003234:	687f      	ldr	r7, [r7, #4]
 8003236:	e7b6      	b.n	80031a6 <_malloc_r+0x4a>
 8003238:	461a      	mov	r2, r3
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	42a3      	cmp	r3, r4
 800323e:	d1fb      	bne.n	8003238 <_malloc_r+0xdc>
 8003240:	2300      	movs	r3, #0
 8003242:	6053      	str	r3, [r2, #4]
 8003244:	e7de      	b.n	8003204 <_malloc_r+0xa8>
 8003246:	230c      	movs	r3, #12
 8003248:	6033      	str	r3, [r6, #0]
 800324a:	4630      	mov	r0, r6
 800324c:	f000 f80c 	bl	8003268 <__malloc_unlock>
 8003250:	e794      	b.n	800317c <_malloc_r+0x20>
 8003252:	6005      	str	r5, [r0, #0]
 8003254:	e7d6      	b.n	8003204 <_malloc_r+0xa8>
 8003256:	bf00      	nop
 8003258:	20000480 	.word	0x20000480

0800325c <__malloc_lock>:
 800325c:	4801      	ldr	r0, [pc, #4]	@ (8003264 <__malloc_lock+0x8>)
 800325e:	f7ff bf0f 	b.w	8003080 <__retarget_lock_acquire_recursive>
 8003262:	bf00      	nop
 8003264:	20000478 	.word	0x20000478

08003268 <__malloc_unlock>:
 8003268:	4801      	ldr	r0, [pc, #4]	@ (8003270 <__malloc_unlock+0x8>)
 800326a:	f7ff bf0a 	b.w	8003082 <__retarget_lock_release_recursive>
 800326e:	bf00      	nop
 8003270:	20000478 	.word	0x20000478

08003274 <__ssputs_r>:
 8003274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	688e      	ldr	r6, [r1, #8]
 800327a:	461f      	mov	r7, r3
 800327c:	42be      	cmp	r6, r7
 800327e:	680b      	ldr	r3, [r1, #0]
 8003280:	4682      	mov	sl, r0
 8003282:	460c      	mov	r4, r1
 8003284:	4690      	mov	r8, r2
 8003286:	d82d      	bhi.n	80032e4 <__ssputs_r+0x70>
 8003288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800328c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003290:	d026      	beq.n	80032e0 <__ssputs_r+0x6c>
 8003292:	6965      	ldr	r5, [r4, #20]
 8003294:	6909      	ldr	r1, [r1, #16]
 8003296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800329a:	eba3 0901 	sub.w	r9, r3, r1
 800329e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a2:	1c7b      	adds	r3, r7, #1
 80032a4:	444b      	add	r3, r9
 80032a6:	106d      	asrs	r5, r5, #1
 80032a8:	429d      	cmp	r5, r3
 80032aa:	bf38      	it	cc
 80032ac:	461d      	movcc	r5, r3
 80032ae:	0553      	lsls	r3, r2, #21
 80032b0:	d527      	bpl.n	8003302 <__ssputs_r+0x8e>
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7ff ff52 	bl	800315c <_malloc_r>
 80032b8:	4606      	mov	r6, r0
 80032ba:	b360      	cbz	r0, 8003316 <__ssputs_r+0xa2>
 80032bc:	6921      	ldr	r1, [r4, #16]
 80032be:	464a      	mov	r2, r9
 80032c0:	f000 fae6 	bl	8003890 <memcpy>
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	6126      	str	r6, [r4, #16]
 80032d2:	6165      	str	r5, [r4, #20]
 80032d4:	444e      	add	r6, r9
 80032d6:	eba5 0509 	sub.w	r5, r5, r9
 80032da:	6026      	str	r6, [r4, #0]
 80032dc:	60a5      	str	r5, [r4, #8]
 80032de:	463e      	mov	r6, r7
 80032e0:	42be      	cmp	r6, r7
 80032e2:	d900      	bls.n	80032e6 <__ssputs_r+0x72>
 80032e4:	463e      	mov	r6, r7
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	4632      	mov	r2, r6
 80032ea:	4641      	mov	r1, r8
 80032ec:	f000 faa6 	bl	800383c <memmove>
 80032f0:	68a3      	ldr	r3, [r4, #8]
 80032f2:	1b9b      	subs	r3, r3, r6
 80032f4:	60a3      	str	r3, [r4, #8]
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	4433      	add	r3, r6
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	2000      	movs	r0, #0
 80032fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003302:	462a      	mov	r2, r5
 8003304:	f000 fad2 	bl	80038ac <_realloc_r>
 8003308:	4606      	mov	r6, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d1e0      	bne.n	80032d0 <__ssputs_r+0x5c>
 800330e:	6921      	ldr	r1, [r4, #16]
 8003310:	4650      	mov	r0, sl
 8003312:	f7ff feb7 	bl	8003084 <_free_r>
 8003316:	230c      	movs	r3, #12
 8003318:	f8ca 3000 	str.w	r3, [sl]
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	e7e9      	b.n	80032fe <__ssputs_r+0x8a>
	...

0800332c <_svfiprintf_r>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	4698      	mov	r8, r3
 8003332:	898b      	ldrh	r3, [r1, #12]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	b09d      	sub	sp, #116	@ 0x74
 8003338:	4607      	mov	r7, r0
 800333a:	460d      	mov	r5, r1
 800333c:	4614      	mov	r4, r2
 800333e:	d510      	bpl.n	8003362 <_svfiprintf_r+0x36>
 8003340:	690b      	ldr	r3, [r1, #16]
 8003342:	b973      	cbnz	r3, 8003362 <_svfiprintf_r+0x36>
 8003344:	2140      	movs	r1, #64	@ 0x40
 8003346:	f7ff ff09 	bl	800315c <_malloc_r>
 800334a:	6028      	str	r0, [r5, #0]
 800334c:	6128      	str	r0, [r5, #16]
 800334e:	b930      	cbnz	r0, 800335e <_svfiprintf_r+0x32>
 8003350:	230c      	movs	r3, #12
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	b01d      	add	sp, #116	@ 0x74
 800335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335e:	2340      	movs	r3, #64	@ 0x40
 8003360:	616b      	str	r3, [r5, #20]
 8003362:	2300      	movs	r3, #0
 8003364:	9309      	str	r3, [sp, #36]	@ 0x24
 8003366:	2320      	movs	r3, #32
 8003368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800336c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003370:	2330      	movs	r3, #48	@ 0x30
 8003372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003510 <_svfiprintf_r+0x1e4>
 8003376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800337a:	f04f 0901 	mov.w	r9, #1
 800337e:	4623      	mov	r3, r4
 8003380:	469a      	mov	sl, r3
 8003382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003386:	b10a      	cbz	r2, 800338c <_svfiprintf_r+0x60>
 8003388:	2a25      	cmp	r2, #37	@ 0x25
 800338a:	d1f9      	bne.n	8003380 <_svfiprintf_r+0x54>
 800338c:	ebba 0b04 	subs.w	fp, sl, r4
 8003390:	d00b      	beq.n	80033aa <_svfiprintf_r+0x7e>
 8003392:	465b      	mov	r3, fp
 8003394:	4622      	mov	r2, r4
 8003396:	4629      	mov	r1, r5
 8003398:	4638      	mov	r0, r7
 800339a:	f7ff ff6b 	bl	8003274 <__ssputs_r>
 800339e:	3001      	adds	r0, #1
 80033a0:	f000 80a7 	beq.w	80034f2 <_svfiprintf_r+0x1c6>
 80033a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033a6:	445a      	add	r2, fp
 80033a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80033aa:	f89a 3000 	ldrb.w	r3, [sl]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 809f 	beq.w	80034f2 <_svfiprintf_r+0x1c6>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033be:	f10a 0a01 	add.w	sl, sl, #1
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	9307      	str	r3, [sp, #28]
 80033c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80033cc:	4654      	mov	r4, sl
 80033ce:	2205      	movs	r2, #5
 80033d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d4:	484e      	ldr	r0, [pc, #312]	@ (8003510 <_svfiprintf_r+0x1e4>)
 80033d6:	f7fc ff0b 	bl	80001f0 <memchr>
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	b9d8      	cbnz	r0, 8003416 <_svfiprintf_r+0xea>
 80033de:	06d0      	lsls	r0, r2, #27
 80033e0:	bf44      	itt	mi
 80033e2:	2320      	movmi	r3, #32
 80033e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033e8:	0711      	lsls	r1, r2, #28
 80033ea:	bf44      	itt	mi
 80033ec:	232b      	movmi	r3, #43	@ 0x2b
 80033ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f2:	f89a 3000 	ldrb.w	r3, [sl]
 80033f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80033f8:	d015      	beq.n	8003426 <_svfiprintf_r+0xfa>
 80033fa:	9a07      	ldr	r2, [sp, #28]
 80033fc:	4654      	mov	r4, sl
 80033fe:	2000      	movs	r0, #0
 8003400:	f04f 0c0a 	mov.w	ip, #10
 8003404:	4621      	mov	r1, r4
 8003406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340a:	3b30      	subs	r3, #48	@ 0x30
 800340c:	2b09      	cmp	r3, #9
 800340e:	d94b      	bls.n	80034a8 <_svfiprintf_r+0x17c>
 8003410:	b1b0      	cbz	r0, 8003440 <_svfiprintf_r+0x114>
 8003412:	9207      	str	r2, [sp, #28]
 8003414:	e014      	b.n	8003440 <_svfiprintf_r+0x114>
 8003416:	eba0 0308 	sub.w	r3, r0, r8
 800341a:	fa09 f303 	lsl.w	r3, r9, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	9304      	str	r3, [sp, #16]
 8003422:	46a2      	mov	sl, r4
 8003424:	e7d2      	b.n	80033cc <_svfiprintf_r+0xa0>
 8003426:	9b03      	ldr	r3, [sp, #12]
 8003428:	1d19      	adds	r1, r3, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	9103      	str	r1, [sp, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	bfbb      	ittet	lt
 8003432:	425b      	neglt	r3, r3
 8003434:	f042 0202 	orrlt.w	r2, r2, #2
 8003438:	9307      	strge	r3, [sp, #28]
 800343a:	9307      	strlt	r3, [sp, #28]
 800343c:	bfb8      	it	lt
 800343e:	9204      	strlt	r2, [sp, #16]
 8003440:	7823      	ldrb	r3, [r4, #0]
 8003442:	2b2e      	cmp	r3, #46	@ 0x2e
 8003444:	d10a      	bne.n	800345c <_svfiprintf_r+0x130>
 8003446:	7863      	ldrb	r3, [r4, #1]
 8003448:	2b2a      	cmp	r3, #42	@ 0x2a
 800344a:	d132      	bne.n	80034b2 <_svfiprintf_r+0x186>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	1d1a      	adds	r2, r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	9203      	str	r2, [sp, #12]
 8003454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003458:	3402      	adds	r4, #2
 800345a:	9305      	str	r3, [sp, #20]
 800345c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003520 <_svfiprintf_r+0x1f4>
 8003460:	7821      	ldrb	r1, [r4, #0]
 8003462:	2203      	movs	r2, #3
 8003464:	4650      	mov	r0, sl
 8003466:	f7fc fec3 	bl	80001f0 <memchr>
 800346a:	b138      	cbz	r0, 800347c <_svfiprintf_r+0x150>
 800346c:	9b04      	ldr	r3, [sp, #16]
 800346e:	eba0 000a 	sub.w	r0, r0, sl
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	4082      	lsls	r2, r0
 8003476:	4313      	orrs	r3, r2
 8003478:	3401      	adds	r4, #1
 800347a:	9304      	str	r3, [sp, #16]
 800347c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003480:	4824      	ldr	r0, [pc, #144]	@ (8003514 <_svfiprintf_r+0x1e8>)
 8003482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003486:	2206      	movs	r2, #6
 8003488:	f7fc feb2 	bl	80001f0 <memchr>
 800348c:	2800      	cmp	r0, #0
 800348e:	d036      	beq.n	80034fe <_svfiprintf_r+0x1d2>
 8003490:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <_svfiprintf_r+0x1ec>)
 8003492:	bb1b      	cbnz	r3, 80034dc <_svfiprintf_r+0x1b0>
 8003494:	9b03      	ldr	r3, [sp, #12]
 8003496:	3307      	adds	r3, #7
 8003498:	f023 0307 	bic.w	r3, r3, #7
 800349c:	3308      	adds	r3, #8
 800349e:	9303      	str	r3, [sp, #12]
 80034a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034a2:	4433      	add	r3, r6
 80034a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80034a6:	e76a      	b.n	800337e <_svfiprintf_r+0x52>
 80034a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ac:	460c      	mov	r4, r1
 80034ae:	2001      	movs	r0, #1
 80034b0:	e7a8      	b.n	8003404 <_svfiprintf_r+0xd8>
 80034b2:	2300      	movs	r3, #0
 80034b4:	3401      	adds	r4, #1
 80034b6:	9305      	str	r3, [sp, #20]
 80034b8:	4619      	mov	r1, r3
 80034ba:	f04f 0c0a 	mov.w	ip, #10
 80034be:	4620      	mov	r0, r4
 80034c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c4:	3a30      	subs	r2, #48	@ 0x30
 80034c6:	2a09      	cmp	r2, #9
 80034c8:	d903      	bls.n	80034d2 <_svfiprintf_r+0x1a6>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0c6      	beq.n	800345c <_svfiprintf_r+0x130>
 80034ce:	9105      	str	r1, [sp, #20]
 80034d0:	e7c4      	b.n	800345c <_svfiprintf_r+0x130>
 80034d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d6:	4604      	mov	r4, r0
 80034d8:	2301      	movs	r3, #1
 80034da:	e7f0      	b.n	80034be <_svfiprintf_r+0x192>
 80034dc:	ab03      	add	r3, sp, #12
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	462a      	mov	r2, r5
 80034e2:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <_svfiprintf_r+0x1f0>)
 80034e4:	a904      	add	r1, sp, #16
 80034e6:	4638      	mov	r0, r7
 80034e8:	f3af 8000 	nop.w
 80034ec:	1c42      	adds	r2, r0, #1
 80034ee:	4606      	mov	r6, r0
 80034f0:	d1d6      	bne.n	80034a0 <_svfiprintf_r+0x174>
 80034f2:	89ab      	ldrh	r3, [r5, #12]
 80034f4:	065b      	lsls	r3, r3, #25
 80034f6:	f53f af2d 	bmi.w	8003354 <_svfiprintf_r+0x28>
 80034fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034fc:	e72c      	b.n	8003358 <_svfiprintf_r+0x2c>
 80034fe:	ab03      	add	r3, sp, #12
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	462a      	mov	r2, r5
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <_svfiprintf_r+0x1f0>)
 8003506:	a904      	add	r1, sp, #16
 8003508:	4638      	mov	r0, r7
 800350a:	f000 f879 	bl	8003600 <_printf_i>
 800350e:	e7ed      	b.n	80034ec <_svfiprintf_r+0x1c0>
 8003510:	08003980 	.word	0x08003980
 8003514:	0800398a 	.word	0x0800398a
 8003518:	00000000 	.word	0x00000000
 800351c:	08003275 	.word	0x08003275
 8003520:	08003986 	.word	0x08003986

08003524 <_printf_common>:
 8003524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	4616      	mov	r6, r2
 800352a:	4698      	mov	r8, r3
 800352c:	688a      	ldr	r2, [r1, #8]
 800352e:	690b      	ldr	r3, [r1, #16]
 8003530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003534:	4293      	cmp	r3, r2
 8003536:	bfb8      	it	lt
 8003538:	4613      	movlt	r3, r2
 800353a:	6033      	str	r3, [r6, #0]
 800353c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003540:	4607      	mov	r7, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b10a      	cbz	r2, 800354a <_printf_common+0x26>
 8003546:	3301      	adds	r3, #1
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0699      	lsls	r1, r3, #26
 800354e:	bf42      	ittt	mi
 8003550:	6833      	ldrmi	r3, [r6, #0]
 8003552:	3302      	addmi	r3, #2
 8003554:	6033      	strmi	r3, [r6, #0]
 8003556:	6825      	ldr	r5, [r4, #0]
 8003558:	f015 0506 	ands.w	r5, r5, #6
 800355c:	d106      	bne.n	800356c <_printf_common+0x48>
 800355e:	f104 0a19 	add.w	sl, r4, #25
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	6832      	ldr	r2, [r6, #0]
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	42ab      	cmp	r3, r5
 800356a:	dc26      	bgt.n	80035ba <_printf_common+0x96>
 800356c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	3b00      	subs	r3, #0
 8003574:	bf18      	it	ne
 8003576:	2301      	movne	r3, #1
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d42b      	bmi.n	80035d4 <_printf_common+0xb0>
 800357c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003580:	4641      	mov	r1, r8
 8003582:	4638      	mov	r0, r7
 8003584:	47c8      	blx	r9
 8003586:	3001      	adds	r0, #1
 8003588:	d01e      	beq.n	80035c8 <_printf_common+0xa4>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	6922      	ldr	r2, [r4, #16]
 800358e:	f003 0306 	and.w	r3, r3, #6
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf02      	ittt	eq
 8003596:	68e5      	ldreq	r5, [r4, #12]
 8003598:	6833      	ldreq	r3, [r6, #0]
 800359a:	1aed      	subeq	r5, r5, r3
 800359c:	68a3      	ldr	r3, [r4, #8]
 800359e:	bf0c      	ite	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	2500      	movne	r5, #0
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bfc4      	itt	gt
 80035aa:	1a9b      	subgt	r3, r3, r2
 80035ac:	18ed      	addgt	r5, r5, r3
 80035ae:	2600      	movs	r6, #0
 80035b0:	341a      	adds	r4, #26
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d11a      	bne.n	80035ec <_printf_common+0xc8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e008      	b.n	80035cc <_printf_common+0xa8>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4641      	mov	r1, r8
 80035c0:	4638      	mov	r0, r7
 80035c2:	47c8      	blx	r9
 80035c4:	3001      	adds	r0, #1
 80035c6:	d103      	bne.n	80035d0 <_printf_common+0xac>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	3501      	adds	r5, #1
 80035d2:	e7c6      	b.n	8003562 <_printf_common+0x3e>
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	2030      	movs	r0, #48	@ 0x30
 80035da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035de:	4422      	add	r2, r4
 80035e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035e8:	3302      	adds	r3, #2
 80035ea:	e7c7      	b.n	800357c <_printf_common+0x58>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4622      	mov	r2, r4
 80035f0:	4641      	mov	r1, r8
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c8      	blx	r9
 80035f6:	3001      	adds	r0, #1
 80035f8:	d0e6      	beq.n	80035c8 <_printf_common+0xa4>
 80035fa:	3601      	adds	r6, #1
 80035fc:	e7d9      	b.n	80035b2 <_printf_common+0x8e>
	...

08003600 <_printf_i>:
 8003600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	7e0f      	ldrb	r7, [r1, #24]
 8003606:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003608:	2f78      	cmp	r7, #120	@ 0x78
 800360a:	4691      	mov	r9, r2
 800360c:	4680      	mov	r8, r0
 800360e:	460c      	mov	r4, r1
 8003610:	469a      	mov	sl, r3
 8003612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003616:	d807      	bhi.n	8003628 <_printf_i+0x28>
 8003618:	2f62      	cmp	r7, #98	@ 0x62
 800361a:	d80a      	bhi.n	8003632 <_printf_i+0x32>
 800361c:	2f00      	cmp	r7, #0
 800361e:	f000 80d1 	beq.w	80037c4 <_printf_i+0x1c4>
 8003622:	2f58      	cmp	r7, #88	@ 0x58
 8003624:	f000 80b8 	beq.w	8003798 <_printf_i+0x198>
 8003628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800362c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003630:	e03a      	b.n	80036a8 <_printf_i+0xa8>
 8003632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003636:	2b15      	cmp	r3, #21
 8003638:	d8f6      	bhi.n	8003628 <_printf_i+0x28>
 800363a:	a101      	add	r1, pc, #4	@ (adr r1, 8003640 <_printf_i+0x40>)
 800363c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003640:	08003699 	.word	0x08003699
 8003644:	080036ad 	.word	0x080036ad
 8003648:	08003629 	.word	0x08003629
 800364c:	08003629 	.word	0x08003629
 8003650:	08003629 	.word	0x08003629
 8003654:	08003629 	.word	0x08003629
 8003658:	080036ad 	.word	0x080036ad
 800365c:	08003629 	.word	0x08003629
 8003660:	08003629 	.word	0x08003629
 8003664:	08003629 	.word	0x08003629
 8003668:	08003629 	.word	0x08003629
 800366c:	080037ab 	.word	0x080037ab
 8003670:	080036d7 	.word	0x080036d7
 8003674:	08003765 	.word	0x08003765
 8003678:	08003629 	.word	0x08003629
 800367c:	08003629 	.word	0x08003629
 8003680:	080037cd 	.word	0x080037cd
 8003684:	08003629 	.word	0x08003629
 8003688:	080036d7 	.word	0x080036d7
 800368c:	08003629 	.word	0x08003629
 8003690:	08003629 	.word	0x08003629
 8003694:	0800376d 	.word	0x0800376d
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6032      	str	r2, [r6, #0]
 80036a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036a8:	2301      	movs	r3, #1
 80036aa:	e09c      	b.n	80037e6 <_printf_i+0x1e6>
 80036ac:	6833      	ldr	r3, [r6, #0]
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	1d19      	adds	r1, r3, #4
 80036b2:	6031      	str	r1, [r6, #0]
 80036b4:	0606      	lsls	r6, r0, #24
 80036b6:	d501      	bpl.n	80036bc <_printf_i+0xbc>
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	e003      	b.n	80036c4 <_printf_i+0xc4>
 80036bc:	0645      	lsls	r5, r0, #25
 80036be:	d5fb      	bpl.n	80036b8 <_printf_i+0xb8>
 80036c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	da03      	bge.n	80036d0 <_printf_i+0xd0>
 80036c8:	232d      	movs	r3, #45	@ 0x2d
 80036ca:	426d      	negs	r5, r5
 80036cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036d0:	4858      	ldr	r0, [pc, #352]	@ (8003834 <_printf_i+0x234>)
 80036d2:	230a      	movs	r3, #10
 80036d4:	e011      	b.n	80036fa <_printf_i+0xfa>
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	0608      	lsls	r0, r1, #24
 80036dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80036e0:	d402      	bmi.n	80036e8 <_printf_i+0xe8>
 80036e2:	0649      	lsls	r1, r1, #25
 80036e4:	bf48      	it	mi
 80036e6:	b2ad      	uxthmi	r5, r5
 80036e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036ea:	4852      	ldr	r0, [pc, #328]	@ (8003834 <_printf_i+0x234>)
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	bf14      	ite	ne
 80036f0:	230a      	movne	r3, #10
 80036f2:	2308      	moveq	r3, #8
 80036f4:	2100      	movs	r1, #0
 80036f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036fa:	6866      	ldr	r6, [r4, #4]
 80036fc:	60a6      	str	r6, [r4, #8]
 80036fe:	2e00      	cmp	r6, #0
 8003700:	db05      	blt.n	800370e <_printf_i+0x10e>
 8003702:	6821      	ldr	r1, [r4, #0]
 8003704:	432e      	orrs	r6, r5
 8003706:	f021 0104 	bic.w	r1, r1, #4
 800370a:	6021      	str	r1, [r4, #0]
 800370c:	d04b      	beq.n	80037a6 <_printf_i+0x1a6>
 800370e:	4616      	mov	r6, r2
 8003710:	fbb5 f1f3 	udiv	r1, r5, r3
 8003714:	fb03 5711 	mls	r7, r3, r1, r5
 8003718:	5dc7      	ldrb	r7, [r0, r7]
 800371a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800371e:	462f      	mov	r7, r5
 8003720:	42bb      	cmp	r3, r7
 8003722:	460d      	mov	r5, r1
 8003724:	d9f4      	bls.n	8003710 <_printf_i+0x110>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d10b      	bne.n	8003742 <_printf_i+0x142>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	07df      	lsls	r7, r3, #31
 800372e:	d508      	bpl.n	8003742 <_printf_i+0x142>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	6861      	ldr	r1, [r4, #4]
 8003734:	4299      	cmp	r1, r3
 8003736:	bfde      	ittt	le
 8003738:	2330      	movle	r3, #48	@ 0x30
 800373a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800373e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003742:	1b92      	subs	r2, r2, r6
 8003744:	6122      	str	r2, [r4, #16]
 8003746:	f8cd a000 	str.w	sl, [sp]
 800374a:	464b      	mov	r3, r9
 800374c:	aa03      	add	r2, sp, #12
 800374e:	4621      	mov	r1, r4
 8003750:	4640      	mov	r0, r8
 8003752:	f7ff fee7 	bl	8003524 <_printf_common>
 8003756:	3001      	adds	r0, #1
 8003758:	d14a      	bne.n	80037f0 <_printf_i+0x1f0>
 800375a:	f04f 30ff 	mov.w	r0, #4294967295
 800375e:	b004      	add	sp, #16
 8003760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f043 0320 	orr.w	r3, r3, #32
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	4832      	ldr	r0, [pc, #200]	@ (8003838 <_printf_i+0x238>)
 800376e:	2778      	movs	r7, #120	@ 0x78
 8003770:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	6831      	ldr	r1, [r6, #0]
 8003778:	061f      	lsls	r7, r3, #24
 800377a:	f851 5b04 	ldr.w	r5, [r1], #4
 800377e:	d402      	bmi.n	8003786 <_printf_i+0x186>
 8003780:	065f      	lsls	r7, r3, #25
 8003782:	bf48      	it	mi
 8003784:	b2ad      	uxthmi	r5, r5
 8003786:	6031      	str	r1, [r6, #0]
 8003788:	07d9      	lsls	r1, r3, #31
 800378a:	bf44      	itt	mi
 800378c:	f043 0320 	orrmi.w	r3, r3, #32
 8003790:	6023      	strmi	r3, [r4, #0]
 8003792:	b11d      	cbz	r5, 800379c <_printf_i+0x19c>
 8003794:	2310      	movs	r3, #16
 8003796:	e7ad      	b.n	80036f4 <_printf_i+0xf4>
 8003798:	4826      	ldr	r0, [pc, #152]	@ (8003834 <_printf_i+0x234>)
 800379a:	e7e9      	b.n	8003770 <_printf_i+0x170>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	e7f6      	b.n	8003794 <_printf_i+0x194>
 80037a6:	4616      	mov	r6, r2
 80037a8:	e7bd      	b.n	8003726 <_printf_i+0x126>
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	6961      	ldr	r1, [r4, #20]
 80037b0:	1d18      	adds	r0, r3, #4
 80037b2:	6030      	str	r0, [r6, #0]
 80037b4:	062e      	lsls	r6, r5, #24
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	d501      	bpl.n	80037be <_printf_i+0x1be>
 80037ba:	6019      	str	r1, [r3, #0]
 80037bc:	e002      	b.n	80037c4 <_printf_i+0x1c4>
 80037be:	0668      	lsls	r0, r5, #25
 80037c0:	d5fb      	bpl.n	80037ba <_printf_i+0x1ba>
 80037c2:	8019      	strh	r1, [r3, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	6123      	str	r3, [r4, #16]
 80037c8:	4616      	mov	r6, r2
 80037ca:	e7bc      	b.n	8003746 <_printf_i+0x146>
 80037cc:	6833      	ldr	r3, [r6, #0]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	6032      	str	r2, [r6, #0]
 80037d2:	681e      	ldr	r6, [r3, #0]
 80037d4:	6862      	ldr	r2, [r4, #4]
 80037d6:	2100      	movs	r1, #0
 80037d8:	4630      	mov	r0, r6
 80037da:	f7fc fd09 	bl	80001f0 <memchr>
 80037de:	b108      	cbz	r0, 80037e4 <_printf_i+0x1e4>
 80037e0:	1b80      	subs	r0, r0, r6
 80037e2:	6060      	str	r0, [r4, #4]
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	6123      	str	r3, [r4, #16]
 80037e8:	2300      	movs	r3, #0
 80037ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ee:	e7aa      	b.n	8003746 <_printf_i+0x146>
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	4632      	mov	r2, r6
 80037f4:	4649      	mov	r1, r9
 80037f6:	4640      	mov	r0, r8
 80037f8:	47d0      	blx	sl
 80037fa:	3001      	adds	r0, #1
 80037fc:	d0ad      	beq.n	800375a <_printf_i+0x15a>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	079b      	lsls	r3, r3, #30
 8003802:	d413      	bmi.n	800382c <_printf_i+0x22c>
 8003804:	68e0      	ldr	r0, [r4, #12]
 8003806:	9b03      	ldr	r3, [sp, #12]
 8003808:	4298      	cmp	r0, r3
 800380a:	bfb8      	it	lt
 800380c:	4618      	movlt	r0, r3
 800380e:	e7a6      	b.n	800375e <_printf_i+0x15e>
 8003810:	2301      	movs	r3, #1
 8003812:	4632      	mov	r2, r6
 8003814:	4649      	mov	r1, r9
 8003816:	4640      	mov	r0, r8
 8003818:	47d0      	blx	sl
 800381a:	3001      	adds	r0, #1
 800381c:	d09d      	beq.n	800375a <_printf_i+0x15a>
 800381e:	3501      	adds	r5, #1
 8003820:	68e3      	ldr	r3, [r4, #12]
 8003822:	9903      	ldr	r1, [sp, #12]
 8003824:	1a5b      	subs	r3, r3, r1
 8003826:	42ab      	cmp	r3, r5
 8003828:	dcf2      	bgt.n	8003810 <_printf_i+0x210>
 800382a:	e7eb      	b.n	8003804 <_printf_i+0x204>
 800382c:	2500      	movs	r5, #0
 800382e:	f104 0619 	add.w	r6, r4, #25
 8003832:	e7f5      	b.n	8003820 <_printf_i+0x220>
 8003834:	08003991 	.word	0x08003991
 8003838:	080039a2 	.word	0x080039a2

0800383c <memmove>:
 800383c:	4288      	cmp	r0, r1
 800383e:	b510      	push	{r4, lr}
 8003840:	eb01 0402 	add.w	r4, r1, r2
 8003844:	d902      	bls.n	800384c <memmove+0x10>
 8003846:	4284      	cmp	r4, r0
 8003848:	4623      	mov	r3, r4
 800384a:	d807      	bhi.n	800385c <memmove+0x20>
 800384c:	1e43      	subs	r3, r0, #1
 800384e:	42a1      	cmp	r1, r4
 8003850:	d008      	beq.n	8003864 <memmove+0x28>
 8003852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800385a:	e7f8      	b.n	800384e <memmove+0x12>
 800385c:	4402      	add	r2, r0
 800385e:	4601      	mov	r1, r0
 8003860:	428a      	cmp	r2, r1
 8003862:	d100      	bne.n	8003866 <memmove+0x2a>
 8003864:	bd10      	pop	{r4, pc}
 8003866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800386a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800386e:	e7f7      	b.n	8003860 <memmove+0x24>

08003870 <_sbrk_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4d06      	ldr	r5, [pc, #24]	@ (800388c <_sbrk_r+0x1c>)
 8003874:	2300      	movs	r3, #0
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	602b      	str	r3, [r5, #0]
 800387c:	f7fd fbae 	bl	8000fdc <_sbrk>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d102      	bne.n	800388a <_sbrk_r+0x1a>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	b103      	cbz	r3, 800388a <_sbrk_r+0x1a>
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	20000474 	.word	0x20000474

08003890 <memcpy>:
 8003890:	440a      	add	r2, r1
 8003892:	4291      	cmp	r1, r2
 8003894:	f100 33ff 	add.w	r3, r0, #4294967295
 8003898:	d100      	bne.n	800389c <memcpy+0xc>
 800389a:	4770      	bx	lr
 800389c:	b510      	push	{r4, lr}
 800389e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a6:	4291      	cmp	r1, r2
 80038a8:	d1f9      	bne.n	800389e <memcpy+0xe>
 80038aa:	bd10      	pop	{r4, pc}

080038ac <_realloc_r>:
 80038ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b0:	4607      	mov	r7, r0
 80038b2:	4614      	mov	r4, r2
 80038b4:	460d      	mov	r5, r1
 80038b6:	b921      	cbnz	r1, 80038c2 <_realloc_r+0x16>
 80038b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038bc:	4611      	mov	r1, r2
 80038be:	f7ff bc4d 	b.w	800315c <_malloc_r>
 80038c2:	b92a      	cbnz	r2, 80038d0 <_realloc_r+0x24>
 80038c4:	f7ff fbde 	bl	8003084 <_free_r>
 80038c8:	4625      	mov	r5, r4
 80038ca:	4628      	mov	r0, r5
 80038cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038d0:	f000 f81a 	bl	8003908 <_malloc_usable_size_r>
 80038d4:	4284      	cmp	r4, r0
 80038d6:	4606      	mov	r6, r0
 80038d8:	d802      	bhi.n	80038e0 <_realloc_r+0x34>
 80038da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038de:	d8f4      	bhi.n	80038ca <_realloc_r+0x1e>
 80038e0:	4621      	mov	r1, r4
 80038e2:	4638      	mov	r0, r7
 80038e4:	f7ff fc3a 	bl	800315c <_malloc_r>
 80038e8:	4680      	mov	r8, r0
 80038ea:	b908      	cbnz	r0, 80038f0 <_realloc_r+0x44>
 80038ec:	4645      	mov	r5, r8
 80038ee:	e7ec      	b.n	80038ca <_realloc_r+0x1e>
 80038f0:	42b4      	cmp	r4, r6
 80038f2:	4622      	mov	r2, r4
 80038f4:	4629      	mov	r1, r5
 80038f6:	bf28      	it	cs
 80038f8:	4632      	movcs	r2, r6
 80038fa:	f7ff ffc9 	bl	8003890 <memcpy>
 80038fe:	4629      	mov	r1, r5
 8003900:	4638      	mov	r0, r7
 8003902:	f7ff fbbf 	bl	8003084 <_free_r>
 8003906:	e7f1      	b.n	80038ec <_realloc_r+0x40>

08003908 <_malloc_usable_size_r>:
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f18      	subs	r0, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfbc      	itt	lt
 8003912:	580b      	ldrlt	r3, [r1, r0]
 8003914:	18c0      	addlt	r0, r0, r3
 8003916:	4770      	bx	lr

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
